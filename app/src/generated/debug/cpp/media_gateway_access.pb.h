// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media_gateway_access.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_media_5fgateway_5faccess_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_media_5fgateway_5faccess_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_media_5fgateway_5faccess_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_media_5fgateway_5faccess_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_media_5fgateway_5faccess_2eproto;
namespace tencent {
namespace media_gateway {
namespace access {
class GetMediaBroadcastReq;
class GetMediaBroadcastReqDefaultTypeInternal;
extern GetMediaBroadcastReqDefaultTypeInternal _GetMediaBroadcastReq_default_instance_;
class GetMediaBroadcastRes;
class GetMediaBroadcastResDefaultTypeInternal;
extern GetMediaBroadcastResDefaultTypeInternal _GetMediaBroadcastRes_default_instance_;
class HelloReq;
class HelloReqDefaultTypeInternal;
extern HelloReqDefaultTypeInternal _HelloReq_default_instance_;
class HelloRes;
class HelloResDefaultTypeInternal;
extern HelloResDefaultTypeInternal _HelloRes_default_instance_;
class JoinMeetingMediaReq;
class JoinMeetingMediaReqDefaultTypeInternal;
extern JoinMeetingMediaReqDefaultTypeInternal _JoinMeetingMediaReq_default_instance_;
class JoinMeetingMediaRes;
class JoinMeetingMediaResDefaultTypeInternal;
extern JoinMeetingMediaResDefaultTypeInternal _JoinMeetingMediaRes_default_instance_;
class MediaGatewayBodyReq;
class MediaGatewayBodyReqDefaultTypeInternal;
extern MediaGatewayBodyReqDefaultTypeInternal _MediaGatewayBodyReq_default_instance_;
class MediaGatewayBodyRes;
class MediaGatewayBodyResDefaultTypeInternal;
extern MediaGatewayBodyResDefaultTypeInternal _MediaGatewayBodyRes_default_instance_;
class MediaGatewayHead;
class MediaGatewayHeadDefaultTypeInternal;
extern MediaGatewayHeadDefaultTypeInternal _MediaGatewayHead_default_instance_;
class S2CMediaBroadcastReq;
class S2CMediaBroadcastReqDefaultTypeInternal;
extern S2CMediaBroadcastReqDefaultTypeInternal _S2CMediaBroadcastReq_default_instance_;
class S2CMediaBroadcastRes;
class S2CMediaBroadcastResDefaultTypeInternal;
extern S2CMediaBroadcastResDefaultTypeInternal _S2CMediaBroadcastRes_default_instance_;
class SdpReq;
class SdpReqDefaultTypeInternal;
extern SdpReqDefaultTypeInternal _SdpReq_default_instance_;
class SdpRes;
class SdpResDefaultTypeInternal;
extern SdpResDefaultTypeInternal _SdpRes_default_instance_;
}  // namespace access
}  // namespace media_gateway
}  // namespace tencent
PROTOBUF_NAMESPACE_OPEN
template<> ::tencent::media_gateway::access::GetMediaBroadcastReq* Arena::CreateMaybeMessage<::tencent::media_gateway::access::GetMediaBroadcastReq>(Arena*);
template<> ::tencent::media_gateway::access::GetMediaBroadcastRes* Arena::CreateMaybeMessage<::tencent::media_gateway::access::GetMediaBroadcastRes>(Arena*);
template<> ::tencent::media_gateway::access::HelloReq* Arena::CreateMaybeMessage<::tencent::media_gateway::access::HelloReq>(Arena*);
template<> ::tencent::media_gateway::access::HelloRes* Arena::CreateMaybeMessage<::tencent::media_gateway::access::HelloRes>(Arena*);
template<> ::tencent::media_gateway::access::JoinMeetingMediaReq* Arena::CreateMaybeMessage<::tencent::media_gateway::access::JoinMeetingMediaReq>(Arena*);
template<> ::tencent::media_gateway::access::JoinMeetingMediaRes* Arena::CreateMaybeMessage<::tencent::media_gateway::access::JoinMeetingMediaRes>(Arena*);
template<> ::tencent::media_gateway::access::MediaGatewayBodyReq* Arena::CreateMaybeMessage<::tencent::media_gateway::access::MediaGatewayBodyReq>(Arena*);
template<> ::tencent::media_gateway::access::MediaGatewayBodyRes* Arena::CreateMaybeMessage<::tencent::media_gateway::access::MediaGatewayBodyRes>(Arena*);
template<> ::tencent::media_gateway::access::MediaGatewayHead* Arena::CreateMaybeMessage<::tencent::media_gateway::access::MediaGatewayHead>(Arena*);
template<> ::tencent::media_gateway::access::S2CMediaBroadcastReq* Arena::CreateMaybeMessage<::tencent::media_gateway::access::S2CMediaBroadcastReq>(Arena*);
template<> ::tencent::media_gateway::access::S2CMediaBroadcastRes* Arena::CreateMaybeMessage<::tencent::media_gateway::access::S2CMediaBroadcastRes>(Arena*);
template<> ::tencent::media_gateway::access::SdpReq* Arena::CreateMaybeMessage<::tencent::media_gateway::access::SdpReq>(Arena*);
template<> ::tencent::media_gateway::access::SdpRes* Arena::CreateMaybeMessage<::tencent::media_gateway::access::SdpRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tencent {
namespace media_gateway {
namespace access {

enum C2S_MEDIA_GATAWAY_CMD : int {
  CMD_UNKNOWN = 0,
  CMD_C2S_JOIN_MEETING_MEDIA_REQ = 1,
  CMD_C2S_JOIN_MEETING_MEDIA_RES = 2,
  CMD_C2S_HELLO_REQ = 3,
  CMD_C2S_HELLO_RES = 4,
  CMD_C2S_SDP_REQ = 5,
  CMD_C2S_SDP_RES = 6,
  CMD_C2S_GET_MEDIA_BROADCAST_REQ = 7,
  CMD_C2S_GET_MEDIA_BROADCAST_RES = 8,
  CMD_S2C_MEDIA_BROADCAST_REQ = 4097,
  CMD_S2C_MEDIA_BROADCAST_RES = 4098
};
bool C2S_MEDIA_GATAWAY_CMD_IsValid(int value);
constexpr C2S_MEDIA_GATAWAY_CMD C2S_MEDIA_GATAWAY_CMD_MIN = CMD_UNKNOWN;
constexpr C2S_MEDIA_GATAWAY_CMD C2S_MEDIA_GATAWAY_CMD_MAX = CMD_S2C_MEDIA_BROADCAST_RES;
constexpr int C2S_MEDIA_GATAWAY_CMD_ARRAYSIZE = C2S_MEDIA_GATAWAY_CMD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* C2S_MEDIA_GATAWAY_CMD_descriptor();
template<typename T>
inline const std::string& C2S_MEDIA_GATAWAY_CMD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, C2S_MEDIA_GATAWAY_CMD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function C2S_MEDIA_GATAWAY_CMD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    C2S_MEDIA_GATAWAY_CMD_descriptor(), enum_t_value);
}
inline bool C2S_MEDIA_GATAWAY_CMD_Parse(
    const std::string& name, C2S_MEDIA_GATAWAY_CMD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<C2S_MEDIA_GATAWAY_CMD>(
    C2S_MEDIA_GATAWAY_CMD_descriptor(), name, value);
}
// ===================================================================

class MediaGatewayHead :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.MediaGatewayHead) */ {
 public:
  MediaGatewayHead();
  virtual ~MediaGatewayHead();

  MediaGatewayHead(const MediaGatewayHead& from);
  MediaGatewayHead(MediaGatewayHead&& from) noexcept
    : MediaGatewayHead() {
    *this = ::std::move(from);
  }

  inline MediaGatewayHead& operator=(const MediaGatewayHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaGatewayHead& operator=(MediaGatewayHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaGatewayHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaGatewayHead* internal_default_instance() {
    return reinterpret_cast<const MediaGatewayHead*>(
               &_MediaGatewayHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MediaGatewayHead& a, MediaGatewayHead& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaGatewayHead* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaGatewayHead* New() const final {
    return CreateMaybeMessage<MediaGatewayHead>(nullptr);
  }

  MediaGatewayHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaGatewayHead>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaGatewayHead& from);
  void MergeFrom(const MediaGatewayHead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaGatewayHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.MediaGatewayHead";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrUserIdFieldNumber = 6,
    kBytesMediaGatewayTokenFieldNumber = 8,
    kStrErrorStringFieldNumber = 202,
    kUint32SdkidFieldNumber = 1,
    kUint32SdkVerFieldNumber = 2,
    kUint32SeqFieldNumber = 3,
    kUint32CmdFieldNumber = 4,
    kUint64MeetingIdFieldNumber = 7,
    kUint32CropIdFieldNumber = 5,
    kUint32ErrorCodeFieldNumber = 201,
  };
  // optional string str_user_id = 6;
  bool has_str_user_id() const;
  private:
  bool _internal_has_str_user_id() const;
  public:
  void clear_str_user_id();
  const std::string& str_user_id() const;
  void set_str_user_id(const std::string& value);
  void set_str_user_id(std::string&& value);
  void set_str_user_id(const char* value);
  void set_str_user_id(const char* value, size_t size);
  std::string* mutable_str_user_id();
  std::string* release_str_user_id();
  void set_allocated_str_user_id(std::string* str_user_id);
  private:
  const std::string& _internal_str_user_id() const;
  void _internal_set_str_user_id(const std::string& value);
  std::string* _internal_mutable_str_user_id();
  public:

  // optional bytes bytes_media_gateway_token = 8;
  bool has_bytes_media_gateway_token() const;
  private:
  bool _internal_has_bytes_media_gateway_token() const;
  public:
  void clear_bytes_media_gateway_token();
  const std::string& bytes_media_gateway_token() const;
  void set_bytes_media_gateway_token(const std::string& value);
  void set_bytes_media_gateway_token(std::string&& value);
  void set_bytes_media_gateway_token(const char* value);
  void set_bytes_media_gateway_token(const void* value, size_t size);
  std::string* mutable_bytes_media_gateway_token();
  std::string* release_bytes_media_gateway_token();
  void set_allocated_bytes_media_gateway_token(std::string* bytes_media_gateway_token);
  private:
  const std::string& _internal_bytes_media_gateway_token() const;
  void _internal_set_bytes_media_gateway_token(const std::string& value);
  std::string* _internal_mutable_bytes_media_gateway_token();
  public:

  // optional string str_error_string = 202;
  bool has_str_error_string() const;
  private:
  bool _internal_has_str_error_string() const;
  public:
  void clear_str_error_string();
  const std::string& str_error_string() const;
  void set_str_error_string(const std::string& value);
  void set_str_error_string(std::string&& value);
  void set_str_error_string(const char* value);
  void set_str_error_string(const char* value, size_t size);
  std::string* mutable_str_error_string();
  std::string* release_str_error_string();
  void set_allocated_str_error_string(std::string* str_error_string);
  private:
  const std::string& _internal_str_error_string() const;
  void _internal_set_str_error_string(const std::string& value);
  std::string* _internal_mutable_str_error_string();
  public:

  // optional uint32 uint32_sdkid = 1;
  bool has_uint32_sdkid() const;
  private:
  bool _internal_has_uint32_sdkid() const;
  public:
  void clear_uint32_sdkid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_sdkid() const;
  void set_uint32_sdkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_sdkid() const;
  void _internal_set_uint32_sdkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uint32_sdk_ver = 2;
  bool has_uint32_sdk_ver() const;
  private:
  bool _internal_has_uint32_sdk_ver() const;
  public:
  void clear_uint32_sdk_ver();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_sdk_ver() const;
  void set_uint32_sdk_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_sdk_ver() const;
  void _internal_set_uint32_sdk_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uint32_seq = 3;
  bool has_uint32_seq() const;
  private:
  bool _internal_has_uint32_seq() const;
  public:
  void clear_uint32_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_seq() const;
  void set_uint32_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_seq() const;
  void _internal_set_uint32_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uint32_cmd = 4;
  bool has_uint32_cmd() const;
  private:
  bool _internal_has_uint32_cmd() const;
  public:
  void clear_uint32_cmd();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_cmd() const;
  void set_uint32_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_cmd() const;
  void _internal_set_uint32_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 uint64_meeting_id = 7;
  bool has_uint64_meeting_id() const;
  private:
  bool _internal_has_uint64_meeting_id() const;
  public:
  void clear_uint64_meeting_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_meeting_id() const;
  void set_uint64_meeting_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_meeting_id() const;
  void _internal_set_uint64_meeting_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 uint32_crop_id = 5;
  bool has_uint32_crop_id() const;
  private:
  bool _internal_has_uint32_crop_id() const;
  public:
  void clear_uint32_crop_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_crop_id() const;
  void set_uint32_crop_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_crop_id() const;
  void _internal_set_uint32_crop_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uint32_error_code = 201;
  bool has_uint32_error_code() const;
  private:
  bool _internal_has_uint32_error_code() const;
  public:
  void clear_uint32_error_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_error_code() const;
  void set_uint32_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_error_code() const;
  void _internal_set_uint32_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(MediaGatewayHead)
  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.MediaGatewayHead)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_media_gateway_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_error_string_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_sdkid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_sdk_ver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_seq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_meeting_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_crop_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_error_code_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// -------------------------------------------------------------------

class MediaGatewayBodyReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.MediaGatewayBodyReq) */ {
 public:
  MediaGatewayBodyReq();
  virtual ~MediaGatewayBodyReq();

  MediaGatewayBodyReq(const MediaGatewayBodyReq& from);
  MediaGatewayBodyReq(MediaGatewayBodyReq&& from) noexcept
    : MediaGatewayBodyReq() {
    *this = ::std::move(from);
  }

  inline MediaGatewayBodyReq& operator=(const MediaGatewayBodyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaGatewayBodyReq& operator=(MediaGatewayBodyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaGatewayBodyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaGatewayBodyReq* internal_default_instance() {
    return reinterpret_cast<const MediaGatewayBodyReq*>(
               &_MediaGatewayBodyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MediaGatewayBodyReq& a, MediaGatewayBodyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaGatewayBodyReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaGatewayBodyReq* New() const final {
    return CreateMaybeMessage<MediaGatewayBodyReq>(nullptr);
  }

  MediaGatewayBodyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaGatewayBodyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaGatewayBodyReq& from);
  void MergeFrom(const MediaGatewayBodyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaGatewayBodyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.MediaGatewayBodyReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgJoinMeetingMediaReqFieldNumber = 1,
    kMsgHelloReqFieldNumber = 2,
    kMsgSdpReqFieldNumber = 3,
    kMsgS2CMediaBroadcastReqFieldNumber = 4,
    kMsgGetMediaBroadcastReqFieldNumber = 5,
  };
  // optional .tencent.media_gateway.access.JoinMeetingMediaReq msg_join_meeting_media_req = 1;
  bool has_msg_join_meeting_media_req() const;
  private:
  bool _internal_has_msg_join_meeting_media_req() const;
  public:
  void clear_msg_join_meeting_media_req();
  const ::tencent::media_gateway::access::JoinMeetingMediaReq& msg_join_meeting_media_req() const;
  ::tencent::media_gateway::access::JoinMeetingMediaReq* release_msg_join_meeting_media_req();
  ::tencent::media_gateway::access::JoinMeetingMediaReq* mutable_msg_join_meeting_media_req();
  void set_allocated_msg_join_meeting_media_req(::tencent::media_gateway::access::JoinMeetingMediaReq* msg_join_meeting_media_req);
  private:
  const ::tencent::media_gateway::access::JoinMeetingMediaReq& _internal_msg_join_meeting_media_req() const;
  ::tencent::media_gateway::access::JoinMeetingMediaReq* _internal_mutable_msg_join_meeting_media_req();
  public:

  // optional .tencent.media_gateway.access.HelloReq msg_hello_req = 2;
  bool has_msg_hello_req() const;
  private:
  bool _internal_has_msg_hello_req() const;
  public:
  void clear_msg_hello_req();
  const ::tencent::media_gateway::access::HelloReq& msg_hello_req() const;
  ::tencent::media_gateway::access::HelloReq* release_msg_hello_req();
  ::tencent::media_gateway::access::HelloReq* mutable_msg_hello_req();
  void set_allocated_msg_hello_req(::tencent::media_gateway::access::HelloReq* msg_hello_req);
  private:
  const ::tencent::media_gateway::access::HelloReq& _internal_msg_hello_req() const;
  ::tencent::media_gateway::access::HelloReq* _internal_mutable_msg_hello_req();
  public:

  // optional .tencent.media_gateway.access.SdpReq msg_sdp_req = 3;
  bool has_msg_sdp_req() const;
  private:
  bool _internal_has_msg_sdp_req() const;
  public:
  void clear_msg_sdp_req();
  const ::tencent::media_gateway::access::SdpReq& msg_sdp_req() const;
  ::tencent::media_gateway::access::SdpReq* release_msg_sdp_req();
  ::tencent::media_gateway::access::SdpReq* mutable_msg_sdp_req();
  void set_allocated_msg_sdp_req(::tencent::media_gateway::access::SdpReq* msg_sdp_req);
  private:
  const ::tencent::media_gateway::access::SdpReq& _internal_msg_sdp_req() const;
  ::tencent::media_gateway::access::SdpReq* _internal_mutable_msg_sdp_req();
  public:

  // optional .tencent.media_gateway.access.S2CMediaBroadcastReq msg_s2c_media_broadcast_req = 4;
  bool has_msg_s2c_media_broadcast_req() const;
  private:
  bool _internal_has_msg_s2c_media_broadcast_req() const;
  public:
  void clear_msg_s2c_media_broadcast_req();
  const ::tencent::media_gateway::access::S2CMediaBroadcastReq& msg_s2c_media_broadcast_req() const;
  ::tencent::media_gateway::access::S2CMediaBroadcastReq* release_msg_s2c_media_broadcast_req();
  ::tencent::media_gateway::access::S2CMediaBroadcastReq* mutable_msg_s2c_media_broadcast_req();
  void set_allocated_msg_s2c_media_broadcast_req(::tencent::media_gateway::access::S2CMediaBroadcastReq* msg_s2c_media_broadcast_req);
  private:
  const ::tencent::media_gateway::access::S2CMediaBroadcastReq& _internal_msg_s2c_media_broadcast_req() const;
  ::tencent::media_gateway::access::S2CMediaBroadcastReq* _internal_mutable_msg_s2c_media_broadcast_req();
  public:

  // optional .tencent.media_gateway.access.GetMediaBroadcastReq msg_get_media_broadcast_req = 5;
  bool has_msg_get_media_broadcast_req() const;
  private:
  bool _internal_has_msg_get_media_broadcast_req() const;
  public:
  void clear_msg_get_media_broadcast_req();
  const ::tencent::media_gateway::access::GetMediaBroadcastReq& msg_get_media_broadcast_req() const;
  ::tencent::media_gateway::access::GetMediaBroadcastReq* release_msg_get_media_broadcast_req();
  ::tencent::media_gateway::access::GetMediaBroadcastReq* mutable_msg_get_media_broadcast_req();
  void set_allocated_msg_get_media_broadcast_req(::tencent::media_gateway::access::GetMediaBroadcastReq* msg_get_media_broadcast_req);
  private:
  const ::tencent::media_gateway::access::GetMediaBroadcastReq& _internal_msg_get_media_broadcast_req() const;
  ::tencent::media_gateway::access::GetMediaBroadcastReq* _internal_mutable_msg_get_media_broadcast_req();
  public:

  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.MediaGatewayBodyReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tencent::media_gateway::access::JoinMeetingMediaReq* msg_join_meeting_media_req_;
  ::tencent::media_gateway::access::HelloReq* msg_hello_req_;
  ::tencent::media_gateway::access::SdpReq* msg_sdp_req_;
  ::tencent::media_gateway::access::S2CMediaBroadcastReq* msg_s2c_media_broadcast_req_;
  ::tencent::media_gateway::access::GetMediaBroadcastReq* msg_get_media_broadcast_req_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// -------------------------------------------------------------------

class MediaGatewayBodyRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.MediaGatewayBodyRes) */ {
 public:
  MediaGatewayBodyRes();
  virtual ~MediaGatewayBodyRes();

  MediaGatewayBodyRes(const MediaGatewayBodyRes& from);
  MediaGatewayBodyRes(MediaGatewayBodyRes&& from) noexcept
    : MediaGatewayBodyRes() {
    *this = ::std::move(from);
  }

  inline MediaGatewayBodyRes& operator=(const MediaGatewayBodyRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaGatewayBodyRes& operator=(MediaGatewayBodyRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaGatewayBodyRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaGatewayBodyRes* internal_default_instance() {
    return reinterpret_cast<const MediaGatewayBodyRes*>(
               &_MediaGatewayBodyRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MediaGatewayBodyRes& a, MediaGatewayBodyRes& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaGatewayBodyRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaGatewayBodyRes* New() const final {
    return CreateMaybeMessage<MediaGatewayBodyRes>(nullptr);
  }

  MediaGatewayBodyRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaGatewayBodyRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaGatewayBodyRes& from);
  void MergeFrom(const MediaGatewayBodyRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaGatewayBodyRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.MediaGatewayBodyRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgJoinMeetingMediaResFieldNumber = 1,
    kMsgHelloResFieldNumber = 2,
    kMsgSdpResFieldNumber = 3,
    kMsgS2CMediaBroadcastResFieldNumber = 4,
    kMsgGetMediaBroadcastResFieldNumber = 5,
  };
  // optional .tencent.media_gateway.access.JoinMeetingMediaRes msg_join_meeting_media_res = 1;
  bool has_msg_join_meeting_media_res() const;
  private:
  bool _internal_has_msg_join_meeting_media_res() const;
  public:
  void clear_msg_join_meeting_media_res();
  const ::tencent::media_gateway::access::JoinMeetingMediaRes& msg_join_meeting_media_res() const;
  ::tencent::media_gateway::access::JoinMeetingMediaRes* release_msg_join_meeting_media_res();
  ::tencent::media_gateway::access::JoinMeetingMediaRes* mutable_msg_join_meeting_media_res();
  void set_allocated_msg_join_meeting_media_res(::tencent::media_gateway::access::JoinMeetingMediaRes* msg_join_meeting_media_res);
  private:
  const ::tencent::media_gateway::access::JoinMeetingMediaRes& _internal_msg_join_meeting_media_res() const;
  ::tencent::media_gateway::access::JoinMeetingMediaRes* _internal_mutable_msg_join_meeting_media_res();
  public:

  // optional .tencent.media_gateway.access.HelloRes msg_hello_res = 2;
  bool has_msg_hello_res() const;
  private:
  bool _internal_has_msg_hello_res() const;
  public:
  void clear_msg_hello_res();
  const ::tencent::media_gateway::access::HelloRes& msg_hello_res() const;
  ::tencent::media_gateway::access::HelloRes* release_msg_hello_res();
  ::tencent::media_gateway::access::HelloRes* mutable_msg_hello_res();
  void set_allocated_msg_hello_res(::tencent::media_gateway::access::HelloRes* msg_hello_res);
  private:
  const ::tencent::media_gateway::access::HelloRes& _internal_msg_hello_res() const;
  ::tencent::media_gateway::access::HelloRes* _internal_mutable_msg_hello_res();
  public:

  // optional .tencent.media_gateway.access.SdpRes msg_sdp_res = 3;
  bool has_msg_sdp_res() const;
  private:
  bool _internal_has_msg_sdp_res() const;
  public:
  void clear_msg_sdp_res();
  const ::tencent::media_gateway::access::SdpRes& msg_sdp_res() const;
  ::tencent::media_gateway::access::SdpRes* release_msg_sdp_res();
  ::tencent::media_gateway::access::SdpRes* mutable_msg_sdp_res();
  void set_allocated_msg_sdp_res(::tencent::media_gateway::access::SdpRes* msg_sdp_res);
  private:
  const ::tencent::media_gateway::access::SdpRes& _internal_msg_sdp_res() const;
  ::tencent::media_gateway::access::SdpRes* _internal_mutable_msg_sdp_res();
  public:

  // optional .tencent.media_gateway.access.S2CMediaBroadcastRes msg_s2c_media_broadcast_res = 4;
  bool has_msg_s2c_media_broadcast_res() const;
  private:
  bool _internal_has_msg_s2c_media_broadcast_res() const;
  public:
  void clear_msg_s2c_media_broadcast_res();
  const ::tencent::media_gateway::access::S2CMediaBroadcastRes& msg_s2c_media_broadcast_res() const;
  ::tencent::media_gateway::access::S2CMediaBroadcastRes* release_msg_s2c_media_broadcast_res();
  ::tencent::media_gateway::access::S2CMediaBroadcastRes* mutable_msg_s2c_media_broadcast_res();
  void set_allocated_msg_s2c_media_broadcast_res(::tencent::media_gateway::access::S2CMediaBroadcastRes* msg_s2c_media_broadcast_res);
  private:
  const ::tencent::media_gateway::access::S2CMediaBroadcastRes& _internal_msg_s2c_media_broadcast_res() const;
  ::tencent::media_gateway::access::S2CMediaBroadcastRes* _internal_mutable_msg_s2c_media_broadcast_res();
  public:

  // optional .tencent.media_gateway.access.GetMediaBroadcastRes msg_get_media_broadcast_res = 5;
  bool has_msg_get_media_broadcast_res() const;
  private:
  bool _internal_has_msg_get_media_broadcast_res() const;
  public:
  void clear_msg_get_media_broadcast_res();
  const ::tencent::media_gateway::access::GetMediaBroadcastRes& msg_get_media_broadcast_res() const;
  ::tencent::media_gateway::access::GetMediaBroadcastRes* release_msg_get_media_broadcast_res();
  ::tencent::media_gateway::access::GetMediaBroadcastRes* mutable_msg_get_media_broadcast_res();
  void set_allocated_msg_get_media_broadcast_res(::tencent::media_gateway::access::GetMediaBroadcastRes* msg_get_media_broadcast_res);
  private:
  const ::tencent::media_gateway::access::GetMediaBroadcastRes& _internal_msg_get_media_broadcast_res() const;
  ::tencent::media_gateway::access::GetMediaBroadcastRes* _internal_mutable_msg_get_media_broadcast_res();
  public:

  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.MediaGatewayBodyRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tencent::media_gateway::access::JoinMeetingMediaRes* msg_join_meeting_media_res_;
  ::tencent::media_gateway::access::HelloRes* msg_hello_res_;
  ::tencent::media_gateway::access::SdpRes* msg_sdp_res_;
  ::tencent::media_gateway::access::S2CMediaBroadcastRes* msg_s2c_media_broadcast_res_;
  ::tencent::media_gateway::access::GetMediaBroadcastRes* msg_get_media_broadcast_res_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// -------------------------------------------------------------------

class JoinMeetingMediaReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.JoinMeetingMediaReq) */ {
 public:
  JoinMeetingMediaReq();
  virtual ~JoinMeetingMediaReq();

  JoinMeetingMediaReq(const JoinMeetingMediaReq& from);
  JoinMeetingMediaReq(JoinMeetingMediaReq&& from) noexcept
    : JoinMeetingMediaReq() {
    *this = ::std::move(from);
  }

  inline JoinMeetingMediaReq& operator=(const JoinMeetingMediaReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinMeetingMediaReq& operator=(JoinMeetingMediaReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinMeetingMediaReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinMeetingMediaReq* internal_default_instance() {
    return reinterpret_cast<const JoinMeetingMediaReq*>(
               &_JoinMeetingMediaReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JoinMeetingMediaReq& a, JoinMeetingMediaReq& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinMeetingMediaReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinMeetingMediaReq* New() const final {
    return CreateMaybeMessage<JoinMeetingMediaReq>(nullptr);
  }

  JoinMeetingMediaReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinMeetingMediaReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinMeetingMediaReq& from);
  void MergeFrom(const JoinMeetingMediaReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinMeetingMediaReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.JoinMeetingMediaReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrOsVerionFieldNumber = 1,
    kStrDeviceNameFieldNumber = 2,
    kStrScreenNameFieldNumber = 11,
    kStrCameraNameFieldNumber = 21,
    kStrSpeakerNameFieldNumber = 31,
    kStrMicNameFieldNumber = 41,
    kUint32ScreenWidthFieldNumber = 12,
    kUint32ScreenHeightFieldNumber = 13,
    kUint32CameraWidthFieldNumber = 22,
    kUint32CameraHeightFieldNumber = 23,
  };
  // optional string str_os_verion = 1;
  bool has_str_os_verion() const;
  private:
  bool _internal_has_str_os_verion() const;
  public:
  void clear_str_os_verion();
  const std::string& str_os_verion() const;
  void set_str_os_verion(const std::string& value);
  void set_str_os_verion(std::string&& value);
  void set_str_os_verion(const char* value);
  void set_str_os_verion(const char* value, size_t size);
  std::string* mutable_str_os_verion();
  std::string* release_str_os_verion();
  void set_allocated_str_os_verion(std::string* str_os_verion);
  private:
  const std::string& _internal_str_os_verion() const;
  void _internal_set_str_os_verion(const std::string& value);
  std::string* _internal_mutable_str_os_verion();
  public:

  // optional string str_device_name = 2;
  bool has_str_device_name() const;
  private:
  bool _internal_has_str_device_name() const;
  public:
  void clear_str_device_name();
  const std::string& str_device_name() const;
  void set_str_device_name(const std::string& value);
  void set_str_device_name(std::string&& value);
  void set_str_device_name(const char* value);
  void set_str_device_name(const char* value, size_t size);
  std::string* mutable_str_device_name();
  std::string* release_str_device_name();
  void set_allocated_str_device_name(std::string* str_device_name);
  private:
  const std::string& _internal_str_device_name() const;
  void _internal_set_str_device_name(const std::string& value);
  std::string* _internal_mutable_str_device_name();
  public:

  // optional string str_screen_name = 11;
  bool has_str_screen_name() const;
  private:
  bool _internal_has_str_screen_name() const;
  public:
  void clear_str_screen_name();
  const std::string& str_screen_name() const;
  void set_str_screen_name(const std::string& value);
  void set_str_screen_name(std::string&& value);
  void set_str_screen_name(const char* value);
  void set_str_screen_name(const char* value, size_t size);
  std::string* mutable_str_screen_name();
  std::string* release_str_screen_name();
  void set_allocated_str_screen_name(std::string* str_screen_name);
  private:
  const std::string& _internal_str_screen_name() const;
  void _internal_set_str_screen_name(const std::string& value);
  std::string* _internal_mutable_str_screen_name();
  public:

  // optional string str_camera_name = 21;
  bool has_str_camera_name() const;
  private:
  bool _internal_has_str_camera_name() const;
  public:
  void clear_str_camera_name();
  const std::string& str_camera_name() const;
  void set_str_camera_name(const std::string& value);
  void set_str_camera_name(std::string&& value);
  void set_str_camera_name(const char* value);
  void set_str_camera_name(const char* value, size_t size);
  std::string* mutable_str_camera_name();
  std::string* release_str_camera_name();
  void set_allocated_str_camera_name(std::string* str_camera_name);
  private:
  const std::string& _internal_str_camera_name() const;
  void _internal_set_str_camera_name(const std::string& value);
  std::string* _internal_mutable_str_camera_name();
  public:

  // optional string str_speaker_name = 31;
  bool has_str_speaker_name() const;
  private:
  bool _internal_has_str_speaker_name() const;
  public:
  void clear_str_speaker_name();
  const std::string& str_speaker_name() const;
  void set_str_speaker_name(const std::string& value);
  void set_str_speaker_name(std::string&& value);
  void set_str_speaker_name(const char* value);
  void set_str_speaker_name(const char* value, size_t size);
  std::string* mutable_str_speaker_name();
  std::string* release_str_speaker_name();
  void set_allocated_str_speaker_name(std::string* str_speaker_name);
  private:
  const std::string& _internal_str_speaker_name() const;
  void _internal_set_str_speaker_name(const std::string& value);
  std::string* _internal_mutable_str_speaker_name();
  public:

  // optional string str_mic_name = 41;
  bool has_str_mic_name() const;
  private:
  bool _internal_has_str_mic_name() const;
  public:
  void clear_str_mic_name();
  const std::string& str_mic_name() const;
  void set_str_mic_name(const std::string& value);
  void set_str_mic_name(std::string&& value);
  void set_str_mic_name(const char* value);
  void set_str_mic_name(const char* value, size_t size);
  std::string* mutable_str_mic_name();
  std::string* release_str_mic_name();
  void set_allocated_str_mic_name(std::string* str_mic_name);
  private:
  const std::string& _internal_str_mic_name() const;
  void _internal_set_str_mic_name(const std::string& value);
  std::string* _internal_mutable_str_mic_name();
  public:

  // optional uint32 uint32_screen_width = 12;
  bool has_uint32_screen_width() const;
  private:
  bool _internal_has_uint32_screen_width() const;
  public:
  void clear_uint32_screen_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_screen_width() const;
  void set_uint32_screen_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_screen_width() const;
  void _internal_set_uint32_screen_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uint32_screen_height = 13;
  bool has_uint32_screen_height() const;
  private:
  bool _internal_has_uint32_screen_height() const;
  public:
  void clear_uint32_screen_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_screen_height() const;
  void set_uint32_screen_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_screen_height() const;
  void _internal_set_uint32_screen_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uint32_camera_width = 22;
  bool has_uint32_camera_width() const;
  private:
  bool _internal_has_uint32_camera_width() const;
  public:
  void clear_uint32_camera_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_camera_width() const;
  void set_uint32_camera_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_camera_width() const;
  void _internal_set_uint32_camera_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uint32_camera_height = 23;
  bool has_uint32_camera_height() const;
  private:
  bool _internal_has_uint32_camera_height() const;
  public:
  void clear_uint32_camera_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_camera_height() const;
  void set_uint32_camera_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_camera_height() const;
  void _internal_set_uint32_camera_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.JoinMeetingMediaReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_os_verion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_screen_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_camera_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_speaker_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_mic_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_screen_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_screen_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_camera_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_camera_height_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// -------------------------------------------------------------------

class JoinMeetingMediaRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.JoinMeetingMediaRes) */ {
 public:
  JoinMeetingMediaRes();
  virtual ~JoinMeetingMediaRes();

  JoinMeetingMediaRes(const JoinMeetingMediaRes& from);
  JoinMeetingMediaRes(JoinMeetingMediaRes&& from) noexcept
    : JoinMeetingMediaRes() {
    *this = ::std::move(from);
  }

  inline JoinMeetingMediaRes& operator=(const JoinMeetingMediaRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinMeetingMediaRes& operator=(JoinMeetingMediaRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinMeetingMediaRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinMeetingMediaRes* internal_default_instance() {
    return reinterpret_cast<const JoinMeetingMediaRes*>(
               &_JoinMeetingMediaRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JoinMeetingMediaRes& a, JoinMeetingMediaRes& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinMeetingMediaRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinMeetingMediaRes* New() const final {
    return CreateMaybeMessage<JoinMeetingMediaRes>(nullptr);
  }

  JoinMeetingMediaRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinMeetingMediaRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinMeetingMediaRes& from);
  void MergeFrom(const JoinMeetingMediaRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinMeetingMediaRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.JoinMeetingMediaRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.JoinMeetingMediaRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// -------------------------------------------------------------------

class HelloReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.HelloReq) */ {
 public:
  HelloReq();
  virtual ~HelloReq();

  HelloReq(const HelloReq& from);
  HelloReq(HelloReq&& from) noexcept
    : HelloReq() {
    *this = ::std::move(from);
  }

  inline HelloReq& operator=(const HelloReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReq& operator=(HelloReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloReq* internal_default_instance() {
    return reinterpret_cast<const HelloReq*>(
               &_HelloReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HelloReq& a, HelloReq& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloReq* New() const final {
    return CreateMaybeMessage<HelloReq>(nullptr);
  }

  HelloReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloReq& from);
  void MergeFrom(const HelloReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.HelloReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.HelloReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// -------------------------------------------------------------------

class HelloRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.HelloRes) */ {
 public:
  HelloRes();
  virtual ~HelloRes();

  HelloRes(const HelloRes& from);
  HelloRes(HelloRes&& from) noexcept
    : HelloRes() {
    *this = ::std::move(from);
  }

  inline HelloRes& operator=(const HelloRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRes& operator=(HelloRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloRes* internal_default_instance() {
    return reinterpret_cast<const HelloRes*>(
               &_HelloRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HelloRes& a, HelloRes& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloRes* New() const final {
    return CreateMaybeMessage<HelloRes>(nullptr);
  }

  HelloRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloRes& from);
  void MergeFrom(const HelloRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.HelloRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUint32ClientIpFieldNumber = 1,
    kUint32ClientPortFieldNumber = 2,
    kUint32IntervalFieldNumber = 3,
  };
  // optional uint32 uint32_client_ip = 1;
  bool has_uint32_client_ip() const;
  private:
  bool _internal_has_uint32_client_ip() const;
  public:
  void clear_uint32_client_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_client_ip() const;
  void set_uint32_client_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_client_ip() const;
  void _internal_set_uint32_client_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uint32_client_port = 2;
  bool has_uint32_client_port() const;
  private:
  bool _internal_has_uint32_client_port() const;
  public:
  void clear_uint32_client_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_client_port() const;
  void set_uint32_client_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_client_port() const;
  void _internal_set_uint32_client_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uint32_interval = 3;
  bool has_uint32_interval() const;
  private:
  bool _internal_has_uint32_interval() const;
  public:
  void clear_uint32_interval();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_interval() const;
  void set_uint32_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_interval() const;
  void _internal_set_uint32_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.HelloRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_client_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_client_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_interval_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// -------------------------------------------------------------------

class SdpReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.SdpReq) */ {
 public:
  SdpReq();
  virtual ~SdpReq();

  SdpReq(const SdpReq& from);
  SdpReq(SdpReq&& from) noexcept
    : SdpReq() {
    *this = ::std::move(from);
  }

  inline SdpReq& operator=(const SdpReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdpReq& operator=(SdpReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SdpReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SdpReq* internal_default_instance() {
    return reinterpret_cast<const SdpReq*>(
               &_SdpReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SdpReq& a, SdpReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SdpReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdpReq* New() const final {
    return CreateMaybeMessage<SdpReq>(nullptr);
  }

  SdpReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdpReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SdpReq& from);
  void MergeFrom(const SdpReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdpReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.SdpReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrSdpOfferFieldNumber = 1,
  };
  // optional string str_sdp_offer = 1;
  bool has_str_sdp_offer() const;
  private:
  bool _internal_has_str_sdp_offer() const;
  public:
  void clear_str_sdp_offer();
  const std::string& str_sdp_offer() const;
  void set_str_sdp_offer(const std::string& value);
  void set_str_sdp_offer(std::string&& value);
  void set_str_sdp_offer(const char* value);
  void set_str_sdp_offer(const char* value, size_t size);
  std::string* mutable_str_sdp_offer();
  std::string* release_str_sdp_offer();
  void set_allocated_str_sdp_offer(std::string* str_sdp_offer);
  private:
  const std::string& _internal_str_sdp_offer() const;
  void _internal_set_str_sdp_offer(const std::string& value);
  std::string* _internal_mutable_str_sdp_offer();
  public:

  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.SdpReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_sdp_offer_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// -------------------------------------------------------------------

class SdpRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.SdpRes) */ {
 public:
  SdpRes();
  virtual ~SdpRes();

  SdpRes(const SdpRes& from);
  SdpRes(SdpRes&& from) noexcept
    : SdpRes() {
    *this = ::std::move(from);
  }

  inline SdpRes& operator=(const SdpRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdpRes& operator=(SdpRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SdpRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SdpRes* internal_default_instance() {
    return reinterpret_cast<const SdpRes*>(
               &_SdpRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SdpRes& a, SdpRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SdpRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdpRes* New() const final {
    return CreateMaybeMessage<SdpRes>(nullptr);
  }

  SdpRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdpRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SdpRes& from);
  void MergeFrom(const SdpRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdpRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.SdpRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrSdpAnswerFieldNumber = 1,
  };
  // optional string str_sdp_answer = 1;
  bool has_str_sdp_answer() const;
  private:
  bool _internal_has_str_sdp_answer() const;
  public:
  void clear_str_sdp_answer();
  const std::string& str_sdp_answer() const;
  void set_str_sdp_answer(const std::string& value);
  void set_str_sdp_answer(std::string&& value);
  void set_str_sdp_answer(const char* value);
  void set_str_sdp_answer(const char* value, size_t size);
  std::string* mutable_str_sdp_answer();
  std::string* release_str_sdp_answer();
  void set_allocated_str_sdp_answer(std::string* str_sdp_answer);
  private:
  const std::string& _internal_str_sdp_answer() const;
  void _internal_set_str_sdp_answer(const std::string& value);
  std::string* _internal_mutable_str_sdp_answer();
  public:

  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.SdpRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_sdp_answer_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// -------------------------------------------------------------------

class S2CMediaBroadcastReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.S2CMediaBroadcastReq) */ {
 public:
  S2CMediaBroadcastReq();
  virtual ~S2CMediaBroadcastReq();

  S2CMediaBroadcastReq(const S2CMediaBroadcastReq& from);
  S2CMediaBroadcastReq(S2CMediaBroadcastReq&& from) noexcept
    : S2CMediaBroadcastReq() {
    *this = ::std::move(from);
  }

  inline S2CMediaBroadcastReq& operator=(const S2CMediaBroadcastReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CMediaBroadcastReq& operator=(S2CMediaBroadcastReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CMediaBroadcastReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CMediaBroadcastReq* internal_default_instance() {
    return reinterpret_cast<const S2CMediaBroadcastReq*>(
               &_S2CMediaBroadcastReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S2CMediaBroadcastReq& a, S2CMediaBroadcastReq& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CMediaBroadcastReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CMediaBroadcastReq* New() const final {
    return CreateMaybeMessage<S2CMediaBroadcastReq>(nullptr);
  }

  S2CMediaBroadcastReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CMediaBroadcastReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CMediaBroadcastReq& from);
  void MergeFrom(const S2CMediaBroadcastReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CMediaBroadcastReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.S2CMediaBroadcastReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrSdpFieldNumber = 1,
  };
  // optional string str_sdp = 1;
  bool has_str_sdp() const;
  private:
  bool _internal_has_str_sdp() const;
  public:
  void clear_str_sdp();
  const std::string& str_sdp() const;
  void set_str_sdp(const std::string& value);
  void set_str_sdp(std::string&& value);
  void set_str_sdp(const char* value);
  void set_str_sdp(const char* value, size_t size);
  std::string* mutable_str_sdp();
  std::string* release_str_sdp();
  void set_allocated_str_sdp(std::string* str_sdp);
  private:
  const std::string& _internal_str_sdp() const;
  void _internal_set_str_sdp(const std::string& value);
  std::string* _internal_mutable_str_sdp();
  public:

  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.S2CMediaBroadcastReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_sdp_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// -------------------------------------------------------------------

class S2CMediaBroadcastRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.S2CMediaBroadcastRes) */ {
 public:
  S2CMediaBroadcastRes();
  virtual ~S2CMediaBroadcastRes();

  S2CMediaBroadcastRes(const S2CMediaBroadcastRes& from);
  S2CMediaBroadcastRes(S2CMediaBroadcastRes&& from) noexcept
    : S2CMediaBroadcastRes() {
    *this = ::std::move(from);
  }

  inline S2CMediaBroadcastRes& operator=(const S2CMediaBroadcastRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CMediaBroadcastRes& operator=(S2CMediaBroadcastRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CMediaBroadcastRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CMediaBroadcastRes* internal_default_instance() {
    return reinterpret_cast<const S2CMediaBroadcastRes*>(
               &_S2CMediaBroadcastRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S2CMediaBroadcastRes& a, S2CMediaBroadcastRes& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CMediaBroadcastRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CMediaBroadcastRes* New() const final {
    return CreateMaybeMessage<S2CMediaBroadcastRes>(nullptr);
  }

  S2CMediaBroadcastRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CMediaBroadcastRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CMediaBroadcastRes& from);
  void MergeFrom(const S2CMediaBroadcastRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CMediaBroadcastRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.S2CMediaBroadcastRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.S2CMediaBroadcastRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// -------------------------------------------------------------------

class GetMediaBroadcastReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.GetMediaBroadcastReq) */ {
 public:
  GetMediaBroadcastReq();
  virtual ~GetMediaBroadcastReq();

  GetMediaBroadcastReq(const GetMediaBroadcastReq& from);
  GetMediaBroadcastReq(GetMediaBroadcastReq&& from) noexcept
    : GetMediaBroadcastReq() {
    *this = ::std::move(from);
  }

  inline GetMediaBroadcastReq& operator=(const GetMediaBroadcastReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMediaBroadcastReq& operator=(GetMediaBroadcastReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMediaBroadcastReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMediaBroadcastReq* internal_default_instance() {
    return reinterpret_cast<const GetMediaBroadcastReq*>(
               &_GetMediaBroadcastReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetMediaBroadcastReq& a, GetMediaBroadcastReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMediaBroadcastReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMediaBroadcastReq* New() const final {
    return CreateMaybeMessage<GetMediaBroadcastReq>(nullptr);
  }

  GetMediaBroadcastReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMediaBroadcastReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMediaBroadcastReq& from);
  void MergeFrom(const GetMediaBroadcastReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMediaBroadcastReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.GetMediaBroadcastReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.GetMediaBroadcastReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// -------------------------------------------------------------------

class GetMediaBroadcastRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tencent.media_gateway.access.GetMediaBroadcastRes) */ {
 public:
  GetMediaBroadcastRes();
  virtual ~GetMediaBroadcastRes();

  GetMediaBroadcastRes(const GetMediaBroadcastRes& from);
  GetMediaBroadcastRes(GetMediaBroadcastRes&& from) noexcept
    : GetMediaBroadcastRes() {
    *this = ::std::move(from);
  }

  inline GetMediaBroadcastRes& operator=(const GetMediaBroadcastRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMediaBroadcastRes& operator=(GetMediaBroadcastRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMediaBroadcastRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMediaBroadcastRes* internal_default_instance() {
    return reinterpret_cast<const GetMediaBroadcastRes*>(
               &_GetMediaBroadcastRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetMediaBroadcastRes& a, GetMediaBroadcastRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMediaBroadcastRes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMediaBroadcastRes* New() const final {
    return CreateMaybeMessage<GetMediaBroadcastRes>(nullptr);
  }

  GetMediaBroadcastRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMediaBroadcastRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMediaBroadcastRes& from);
  void MergeFrom(const GetMediaBroadcastRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMediaBroadcastRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tencent.media_gateway.access.GetMediaBroadcastRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_5fgateway_5faccess_2eproto);
    return ::descriptor_table_media_5fgateway_5faccess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrSdpFieldNumber = 1,
  };
  // optional string str_sdp = 1;
  bool has_str_sdp() const;
  private:
  bool _internal_has_str_sdp() const;
  public:
  void clear_str_sdp();
  const std::string& str_sdp() const;
  void set_str_sdp(const std::string& value);
  void set_str_sdp(std::string&& value);
  void set_str_sdp(const char* value);
  void set_str_sdp(const char* value, size_t size);
  std::string* mutable_str_sdp();
  std::string* release_str_sdp();
  void set_allocated_str_sdp(std::string* str_sdp);
  private:
  const std::string& _internal_str_sdp() const;
  void _internal_set_str_sdp(const std::string& value);
  std::string* _internal_mutable_str_sdp();
  public:

  // @@protoc_insertion_point(class_scope:tencent.media_gateway.access.GetMediaBroadcastRes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_sdp_;
  friend struct ::TableStruct_media_5fgateway_5faccess_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MediaGatewayHead

// optional uint32 uint32_sdkid = 1;
inline bool MediaGatewayHead::_internal_has_uint32_sdkid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MediaGatewayHead::has_uint32_sdkid() const {
  return _internal_has_uint32_sdkid();
}
inline void MediaGatewayHead::clear_uint32_sdkid() {
  uint32_sdkid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaGatewayHead::_internal_uint32_sdkid() const {
  return uint32_sdkid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaGatewayHead::uint32_sdkid() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayHead.uint32_sdkid)
  return _internal_uint32_sdkid();
}
inline void MediaGatewayHead::_internal_set_uint32_sdkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  uint32_sdkid_ = value;
}
inline void MediaGatewayHead::set_uint32_sdkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_sdkid(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.MediaGatewayHead.uint32_sdkid)
}

// optional uint32 uint32_sdk_ver = 2;
inline bool MediaGatewayHead::_internal_has_uint32_sdk_ver() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MediaGatewayHead::has_uint32_sdk_ver() const {
  return _internal_has_uint32_sdk_ver();
}
inline void MediaGatewayHead::clear_uint32_sdk_ver() {
  uint32_sdk_ver_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaGatewayHead::_internal_uint32_sdk_ver() const {
  return uint32_sdk_ver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaGatewayHead::uint32_sdk_ver() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayHead.uint32_sdk_ver)
  return _internal_uint32_sdk_ver();
}
inline void MediaGatewayHead::_internal_set_uint32_sdk_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  uint32_sdk_ver_ = value;
}
inline void MediaGatewayHead::set_uint32_sdk_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_sdk_ver(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.MediaGatewayHead.uint32_sdk_ver)
}

// optional uint32 uint32_seq = 3;
inline bool MediaGatewayHead::_internal_has_uint32_seq() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MediaGatewayHead::has_uint32_seq() const {
  return _internal_has_uint32_seq();
}
inline void MediaGatewayHead::clear_uint32_seq() {
  uint32_seq_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaGatewayHead::_internal_uint32_seq() const {
  return uint32_seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaGatewayHead::uint32_seq() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayHead.uint32_seq)
  return _internal_uint32_seq();
}
inline void MediaGatewayHead::_internal_set_uint32_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  uint32_seq_ = value;
}
inline void MediaGatewayHead::set_uint32_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_seq(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.MediaGatewayHead.uint32_seq)
}

// optional uint32 uint32_cmd = 4;
inline bool MediaGatewayHead::_internal_has_uint32_cmd() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MediaGatewayHead::has_uint32_cmd() const {
  return _internal_has_uint32_cmd();
}
inline void MediaGatewayHead::clear_uint32_cmd() {
  uint32_cmd_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaGatewayHead::_internal_uint32_cmd() const {
  return uint32_cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaGatewayHead::uint32_cmd() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayHead.uint32_cmd)
  return _internal_uint32_cmd();
}
inline void MediaGatewayHead::_internal_set_uint32_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  uint32_cmd_ = value;
}
inline void MediaGatewayHead::set_uint32_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_cmd(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.MediaGatewayHead.uint32_cmd)
}

// optional uint32 uint32_crop_id = 5;
inline bool MediaGatewayHead::_internal_has_uint32_crop_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MediaGatewayHead::has_uint32_crop_id() const {
  return _internal_has_uint32_crop_id();
}
inline void MediaGatewayHead::clear_uint32_crop_id() {
  uint32_crop_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaGatewayHead::_internal_uint32_crop_id() const {
  return uint32_crop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaGatewayHead::uint32_crop_id() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayHead.uint32_crop_id)
  return _internal_uint32_crop_id();
}
inline void MediaGatewayHead::_internal_set_uint32_crop_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  uint32_crop_id_ = value;
}
inline void MediaGatewayHead::set_uint32_crop_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_crop_id(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.MediaGatewayHead.uint32_crop_id)
}

// optional string str_user_id = 6;
inline bool MediaGatewayHead::_internal_has_str_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MediaGatewayHead::has_str_user_id() const {
  return _internal_has_str_user_id();
}
inline void MediaGatewayHead::clear_str_user_id() {
  str_user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MediaGatewayHead::str_user_id() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayHead.str_user_id)
  return _internal_str_user_id();
}
inline void MediaGatewayHead::set_str_user_id(const std::string& value) {
  _internal_set_str_user_id(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.MediaGatewayHead.str_user_id)
}
inline std::string* MediaGatewayHead::mutable_str_user_id() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayHead.str_user_id)
  return _internal_mutable_str_user_id();
}
inline const std::string& MediaGatewayHead::_internal_str_user_id() const {
  return str_user_id_.GetNoArena();
}
inline void MediaGatewayHead::_internal_set_str_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaGatewayHead::set_str_user_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.MediaGatewayHead.str_user_id)
}
inline void MediaGatewayHead::set_str_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.MediaGatewayHead.str_user_id)
}
inline void MediaGatewayHead::set_str_user_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.MediaGatewayHead.str_user_id)
}
inline std::string* MediaGatewayHead::_internal_mutable_str_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return str_user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaGatewayHead::release_str_user_id() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayHead.str_user_id)
  if (!_internal_has_str_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_user_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaGatewayHead::set_allocated_str_user_id(std::string* str_user_id) {
  if (str_user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_user_id);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayHead.str_user_id)
}

// optional uint64 uint64_meeting_id = 7;
inline bool MediaGatewayHead::_internal_has_uint64_meeting_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MediaGatewayHead::has_uint64_meeting_id() const {
  return _internal_has_uint64_meeting_id();
}
inline void MediaGatewayHead::clear_uint64_meeting_id() {
  uint64_meeting_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaGatewayHead::_internal_uint64_meeting_id() const {
  return uint64_meeting_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MediaGatewayHead::uint64_meeting_id() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayHead.uint64_meeting_id)
  return _internal_uint64_meeting_id();
}
inline void MediaGatewayHead::_internal_set_uint64_meeting_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  uint64_meeting_id_ = value;
}
inline void MediaGatewayHead::set_uint64_meeting_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64_meeting_id(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.MediaGatewayHead.uint64_meeting_id)
}

// optional bytes bytes_media_gateway_token = 8;
inline bool MediaGatewayHead::_internal_has_bytes_media_gateway_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MediaGatewayHead::has_bytes_media_gateway_token() const {
  return _internal_has_bytes_media_gateway_token();
}
inline void MediaGatewayHead::clear_bytes_media_gateway_token() {
  bytes_media_gateway_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MediaGatewayHead::bytes_media_gateway_token() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayHead.bytes_media_gateway_token)
  return _internal_bytes_media_gateway_token();
}
inline void MediaGatewayHead::set_bytes_media_gateway_token(const std::string& value) {
  _internal_set_bytes_media_gateway_token(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.MediaGatewayHead.bytes_media_gateway_token)
}
inline std::string* MediaGatewayHead::mutable_bytes_media_gateway_token() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayHead.bytes_media_gateway_token)
  return _internal_mutable_bytes_media_gateway_token();
}
inline const std::string& MediaGatewayHead::_internal_bytes_media_gateway_token() const {
  return bytes_media_gateway_token_.GetNoArena();
}
inline void MediaGatewayHead::_internal_set_bytes_media_gateway_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bytes_media_gateway_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaGatewayHead::set_bytes_media_gateway_token(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bytes_media_gateway_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.MediaGatewayHead.bytes_media_gateway_token)
}
inline void MediaGatewayHead::set_bytes_media_gateway_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bytes_media_gateway_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.MediaGatewayHead.bytes_media_gateway_token)
}
inline void MediaGatewayHead::set_bytes_media_gateway_token(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bytes_media_gateway_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.MediaGatewayHead.bytes_media_gateway_token)
}
inline std::string* MediaGatewayHead::_internal_mutable_bytes_media_gateway_token() {
  _has_bits_[0] |= 0x00000002u;
  return bytes_media_gateway_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaGatewayHead::release_bytes_media_gateway_token() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayHead.bytes_media_gateway_token)
  if (!_internal_has_bytes_media_gateway_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bytes_media_gateway_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaGatewayHead::set_allocated_bytes_media_gateway_token(std::string* bytes_media_gateway_token) {
  if (bytes_media_gateway_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bytes_media_gateway_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes_media_gateway_token);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayHead.bytes_media_gateway_token)
}

// optional uint32 uint32_error_code = 201;
inline bool MediaGatewayHead::_internal_has_uint32_error_code() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MediaGatewayHead::has_uint32_error_code() const {
  return _internal_has_uint32_error_code();
}
inline void MediaGatewayHead::clear_uint32_error_code() {
  uint32_error_code_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaGatewayHead::_internal_uint32_error_code() const {
  return uint32_error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MediaGatewayHead::uint32_error_code() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayHead.uint32_error_code)
  return _internal_uint32_error_code();
}
inline void MediaGatewayHead::_internal_set_uint32_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  uint32_error_code_ = value;
}
inline void MediaGatewayHead::set_uint32_error_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_error_code(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.MediaGatewayHead.uint32_error_code)
}

// optional string str_error_string = 202;
inline bool MediaGatewayHead::_internal_has_str_error_string() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MediaGatewayHead::has_str_error_string() const {
  return _internal_has_str_error_string();
}
inline void MediaGatewayHead::clear_str_error_string() {
  str_error_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MediaGatewayHead::str_error_string() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayHead.str_error_string)
  return _internal_str_error_string();
}
inline void MediaGatewayHead::set_str_error_string(const std::string& value) {
  _internal_set_str_error_string(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.MediaGatewayHead.str_error_string)
}
inline std::string* MediaGatewayHead::mutable_str_error_string() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayHead.str_error_string)
  return _internal_mutable_str_error_string();
}
inline const std::string& MediaGatewayHead::_internal_str_error_string() const {
  return str_error_string_.GetNoArena();
}
inline void MediaGatewayHead::_internal_set_str_error_string(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  str_error_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MediaGatewayHead::set_str_error_string(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  str_error_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.MediaGatewayHead.str_error_string)
}
inline void MediaGatewayHead::set_str_error_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  str_error_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.MediaGatewayHead.str_error_string)
}
inline void MediaGatewayHead::set_str_error_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  str_error_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.MediaGatewayHead.str_error_string)
}
inline std::string* MediaGatewayHead::_internal_mutable_str_error_string() {
  _has_bits_[0] |= 0x00000004u;
  return str_error_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MediaGatewayHead::release_str_error_string() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayHead.str_error_string)
  if (!_internal_has_str_error_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return str_error_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MediaGatewayHead::set_allocated_str_error_string(std::string* str_error_string) {
  if (str_error_string != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  str_error_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_error_string);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayHead.str_error_string)
}

// -------------------------------------------------------------------

// MediaGatewayBodyReq

// optional .tencent.media_gateway.access.JoinMeetingMediaReq msg_join_meeting_media_req = 1;
inline bool MediaGatewayBodyReq::_internal_has_msg_join_meeting_media_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || msg_join_meeting_media_req_ != nullptr);
  return value;
}
inline bool MediaGatewayBodyReq::has_msg_join_meeting_media_req() const {
  return _internal_has_msg_join_meeting_media_req();
}
inline void MediaGatewayBodyReq::clear_msg_join_meeting_media_req() {
  if (msg_join_meeting_media_req_ != nullptr) msg_join_meeting_media_req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::tencent::media_gateway::access::JoinMeetingMediaReq& MediaGatewayBodyReq::_internal_msg_join_meeting_media_req() const {
  const ::tencent::media_gateway::access::JoinMeetingMediaReq* p = msg_join_meeting_media_req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tencent::media_gateway::access::JoinMeetingMediaReq*>(
      &::tencent::media_gateway::access::_JoinMeetingMediaReq_default_instance_);
}
inline const ::tencent::media_gateway::access::JoinMeetingMediaReq& MediaGatewayBodyReq::msg_join_meeting_media_req() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayBodyReq.msg_join_meeting_media_req)
  return _internal_msg_join_meeting_media_req();
}
inline ::tencent::media_gateway::access::JoinMeetingMediaReq* MediaGatewayBodyReq::release_msg_join_meeting_media_req() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayBodyReq.msg_join_meeting_media_req)
  _has_bits_[0] &= ~0x00000001u;
  ::tencent::media_gateway::access::JoinMeetingMediaReq* temp = msg_join_meeting_media_req_;
  msg_join_meeting_media_req_ = nullptr;
  return temp;
}
inline ::tencent::media_gateway::access::JoinMeetingMediaReq* MediaGatewayBodyReq::_internal_mutable_msg_join_meeting_media_req() {
  _has_bits_[0] |= 0x00000001u;
  if (msg_join_meeting_media_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::tencent::media_gateway::access::JoinMeetingMediaReq>(GetArenaNoVirtual());
    msg_join_meeting_media_req_ = p;
  }
  return msg_join_meeting_media_req_;
}
inline ::tencent::media_gateway::access::JoinMeetingMediaReq* MediaGatewayBodyReq::mutable_msg_join_meeting_media_req() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayBodyReq.msg_join_meeting_media_req)
  return _internal_mutable_msg_join_meeting_media_req();
}
inline void MediaGatewayBodyReq::set_allocated_msg_join_meeting_media_req(::tencent::media_gateway::access::JoinMeetingMediaReq* msg_join_meeting_media_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_join_meeting_media_req_;
  }
  if (msg_join_meeting_media_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_join_meeting_media_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_join_meeting_media_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_join_meeting_media_req_ = msg_join_meeting_media_req;
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayBodyReq.msg_join_meeting_media_req)
}

// optional .tencent.media_gateway.access.HelloReq msg_hello_req = 2;
inline bool MediaGatewayBodyReq::_internal_has_msg_hello_req() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || msg_hello_req_ != nullptr);
  return value;
}
inline bool MediaGatewayBodyReq::has_msg_hello_req() const {
  return _internal_has_msg_hello_req();
}
inline void MediaGatewayBodyReq::clear_msg_hello_req() {
  if (msg_hello_req_ != nullptr) msg_hello_req_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::tencent::media_gateway::access::HelloReq& MediaGatewayBodyReq::_internal_msg_hello_req() const {
  const ::tencent::media_gateway::access::HelloReq* p = msg_hello_req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tencent::media_gateway::access::HelloReq*>(
      &::tencent::media_gateway::access::_HelloReq_default_instance_);
}
inline const ::tencent::media_gateway::access::HelloReq& MediaGatewayBodyReq::msg_hello_req() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayBodyReq.msg_hello_req)
  return _internal_msg_hello_req();
}
inline ::tencent::media_gateway::access::HelloReq* MediaGatewayBodyReq::release_msg_hello_req() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayBodyReq.msg_hello_req)
  _has_bits_[0] &= ~0x00000002u;
  ::tencent::media_gateway::access::HelloReq* temp = msg_hello_req_;
  msg_hello_req_ = nullptr;
  return temp;
}
inline ::tencent::media_gateway::access::HelloReq* MediaGatewayBodyReq::_internal_mutable_msg_hello_req() {
  _has_bits_[0] |= 0x00000002u;
  if (msg_hello_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::tencent::media_gateway::access::HelloReq>(GetArenaNoVirtual());
    msg_hello_req_ = p;
  }
  return msg_hello_req_;
}
inline ::tencent::media_gateway::access::HelloReq* MediaGatewayBodyReq::mutable_msg_hello_req() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayBodyReq.msg_hello_req)
  return _internal_mutable_msg_hello_req();
}
inline void MediaGatewayBodyReq::set_allocated_msg_hello_req(::tencent::media_gateway::access::HelloReq* msg_hello_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_hello_req_;
  }
  if (msg_hello_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_hello_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_hello_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  msg_hello_req_ = msg_hello_req;
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayBodyReq.msg_hello_req)
}

// optional .tencent.media_gateway.access.SdpReq msg_sdp_req = 3;
inline bool MediaGatewayBodyReq::_internal_has_msg_sdp_req() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || msg_sdp_req_ != nullptr);
  return value;
}
inline bool MediaGatewayBodyReq::has_msg_sdp_req() const {
  return _internal_has_msg_sdp_req();
}
inline void MediaGatewayBodyReq::clear_msg_sdp_req() {
  if (msg_sdp_req_ != nullptr) msg_sdp_req_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::tencent::media_gateway::access::SdpReq& MediaGatewayBodyReq::_internal_msg_sdp_req() const {
  const ::tencent::media_gateway::access::SdpReq* p = msg_sdp_req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tencent::media_gateway::access::SdpReq*>(
      &::tencent::media_gateway::access::_SdpReq_default_instance_);
}
inline const ::tencent::media_gateway::access::SdpReq& MediaGatewayBodyReq::msg_sdp_req() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayBodyReq.msg_sdp_req)
  return _internal_msg_sdp_req();
}
inline ::tencent::media_gateway::access::SdpReq* MediaGatewayBodyReq::release_msg_sdp_req() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayBodyReq.msg_sdp_req)
  _has_bits_[0] &= ~0x00000004u;
  ::tencent::media_gateway::access::SdpReq* temp = msg_sdp_req_;
  msg_sdp_req_ = nullptr;
  return temp;
}
inline ::tencent::media_gateway::access::SdpReq* MediaGatewayBodyReq::_internal_mutable_msg_sdp_req() {
  _has_bits_[0] |= 0x00000004u;
  if (msg_sdp_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::tencent::media_gateway::access::SdpReq>(GetArenaNoVirtual());
    msg_sdp_req_ = p;
  }
  return msg_sdp_req_;
}
inline ::tencent::media_gateway::access::SdpReq* MediaGatewayBodyReq::mutable_msg_sdp_req() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayBodyReq.msg_sdp_req)
  return _internal_mutable_msg_sdp_req();
}
inline void MediaGatewayBodyReq::set_allocated_msg_sdp_req(::tencent::media_gateway::access::SdpReq* msg_sdp_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_sdp_req_;
  }
  if (msg_sdp_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_sdp_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_sdp_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  msg_sdp_req_ = msg_sdp_req;
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayBodyReq.msg_sdp_req)
}

// optional .tencent.media_gateway.access.S2CMediaBroadcastReq msg_s2c_media_broadcast_req = 4;
inline bool MediaGatewayBodyReq::_internal_has_msg_s2c_media_broadcast_req() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || msg_s2c_media_broadcast_req_ != nullptr);
  return value;
}
inline bool MediaGatewayBodyReq::has_msg_s2c_media_broadcast_req() const {
  return _internal_has_msg_s2c_media_broadcast_req();
}
inline void MediaGatewayBodyReq::clear_msg_s2c_media_broadcast_req() {
  if (msg_s2c_media_broadcast_req_ != nullptr) msg_s2c_media_broadcast_req_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::tencent::media_gateway::access::S2CMediaBroadcastReq& MediaGatewayBodyReq::_internal_msg_s2c_media_broadcast_req() const {
  const ::tencent::media_gateway::access::S2CMediaBroadcastReq* p = msg_s2c_media_broadcast_req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tencent::media_gateway::access::S2CMediaBroadcastReq*>(
      &::tencent::media_gateway::access::_S2CMediaBroadcastReq_default_instance_);
}
inline const ::tencent::media_gateway::access::S2CMediaBroadcastReq& MediaGatewayBodyReq::msg_s2c_media_broadcast_req() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayBodyReq.msg_s2c_media_broadcast_req)
  return _internal_msg_s2c_media_broadcast_req();
}
inline ::tencent::media_gateway::access::S2CMediaBroadcastReq* MediaGatewayBodyReq::release_msg_s2c_media_broadcast_req() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayBodyReq.msg_s2c_media_broadcast_req)
  _has_bits_[0] &= ~0x00000008u;
  ::tencent::media_gateway::access::S2CMediaBroadcastReq* temp = msg_s2c_media_broadcast_req_;
  msg_s2c_media_broadcast_req_ = nullptr;
  return temp;
}
inline ::tencent::media_gateway::access::S2CMediaBroadcastReq* MediaGatewayBodyReq::_internal_mutable_msg_s2c_media_broadcast_req() {
  _has_bits_[0] |= 0x00000008u;
  if (msg_s2c_media_broadcast_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::tencent::media_gateway::access::S2CMediaBroadcastReq>(GetArenaNoVirtual());
    msg_s2c_media_broadcast_req_ = p;
  }
  return msg_s2c_media_broadcast_req_;
}
inline ::tencent::media_gateway::access::S2CMediaBroadcastReq* MediaGatewayBodyReq::mutable_msg_s2c_media_broadcast_req() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayBodyReq.msg_s2c_media_broadcast_req)
  return _internal_mutable_msg_s2c_media_broadcast_req();
}
inline void MediaGatewayBodyReq::set_allocated_msg_s2c_media_broadcast_req(::tencent::media_gateway::access::S2CMediaBroadcastReq* msg_s2c_media_broadcast_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_s2c_media_broadcast_req_;
  }
  if (msg_s2c_media_broadcast_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_s2c_media_broadcast_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_s2c_media_broadcast_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  msg_s2c_media_broadcast_req_ = msg_s2c_media_broadcast_req;
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayBodyReq.msg_s2c_media_broadcast_req)
}

// optional .tencent.media_gateway.access.GetMediaBroadcastReq msg_get_media_broadcast_req = 5;
inline bool MediaGatewayBodyReq::_internal_has_msg_get_media_broadcast_req() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || msg_get_media_broadcast_req_ != nullptr);
  return value;
}
inline bool MediaGatewayBodyReq::has_msg_get_media_broadcast_req() const {
  return _internal_has_msg_get_media_broadcast_req();
}
inline void MediaGatewayBodyReq::clear_msg_get_media_broadcast_req() {
  if (msg_get_media_broadcast_req_ != nullptr) msg_get_media_broadcast_req_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::tencent::media_gateway::access::GetMediaBroadcastReq& MediaGatewayBodyReq::_internal_msg_get_media_broadcast_req() const {
  const ::tencent::media_gateway::access::GetMediaBroadcastReq* p = msg_get_media_broadcast_req_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tencent::media_gateway::access::GetMediaBroadcastReq*>(
      &::tencent::media_gateway::access::_GetMediaBroadcastReq_default_instance_);
}
inline const ::tencent::media_gateway::access::GetMediaBroadcastReq& MediaGatewayBodyReq::msg_get_media_broadcast_req() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayBodyReq.msg_get_media_broadcast_req)
  return _internal_msg_get_media_broadcast_req();
}
inline ::tencent::media_gateway::access::GetMediaBroadcastReq* MediaGatewayBodyReq::release_msg_get_media_broadcast_req() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayBodyReq.msg_get_media_broadcast_req)
  _has_bits_[0] &= ~0x00000010u;
  ::tencent::media_gateway::access::GetMediaBroadcastReq* temp = msg_get_media_broadcast_req_;
  msg_get_media_broadcast_req_ = nullptr;
  return temp;
}
inline ::tencent::media_gateway::access::GetMediaBroadcastReq* MediaGatewayBodyReq::_internal_mutable_msg_get_media_broadcast_req() {
  _has_bits_[0] |= 0x00000010u;
  if (msg_get_media_broadcast_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::tencent::media_gateway::access::GetMediaBroadcastReq>(GetArenaNoVirtual());
    msg_get_media_broadcast_req_ = p;
  }
  return msg_get_media_broadcast_req_;
}
inline ::tencent::media_gateway::access::GetMediaBroadcastReq* MediaGatewayBodyReq::mutable_msg_get_media_broadcast_req() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayBodyReq.msg_get_media_broadcast_req)
  return _internal_mutable_msg_get_media_broadcast_req();
}
inline void MediaGatewayBodyReq::set_allocated_msg_get_media_broadcast_req(::tencent::media_gateway::access::GetMediaBroadcastReq* msg_get_media_broadcast_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_get_media_broadcast_req_;
  }
  if (msg_get_media_broadcast_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_get_media_broadcast_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_get_media_broadcast_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  msg_get_media_broadcast_req_ = msg_get_media_broadcast_req;
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayBodyReq.msg_get_media_broadcast_req)
}

// -------------------------------------------------------------------

// MediaGatewayBodyRes

// optional .tencent.media_gateway.access.JoinMeetingMediaRes msg_join_meeting_media_res = 1;
inline bool MediaGatewayBodyRes::_internal_has_msg_join_meeting_media_res() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || msg_join_meeting_media_res_ != nullptr);
  return value;
}
inline bool MediaGatewayBodyRes::has_msg_join_meeting_media_res() const {
  return _internal_has_msg_join_meeting_media_res();
}
inline void MediaGatewayBodyRes::clear_msg_join_meeting_media_res() {
  if (msg_join_meeting_media_res_ != nullptr) msg_join_meeting_media_res_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::tencent::media_gateway::access::JoinMeetingMediaRes& MediaGatewayBodyRes::_internal_msg_join_meeting_media_res() const {
  const ::tencent::media_gateway::access::JoinMeetingMediaRes* p = msg_join_meeting_media_res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tencent::media_gateway::access::JoinMeetingMediaRes*>(
      &::tencent::media_gateway::access::_JoinMeetingMediaRes_default_instance_);
}
inline const ::tencent::media_gateway::access::JoinMeetingMediaRes& MediaGatewayBodyRes::msg_join_meeting_media_res() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayBodyRes.msg_join_meeting_media_res)
  return _internal_msg_join_meeting_media_res();
}
inline ::tencent::media_gateway::access::JoinMeetingMediaRes* MediaGatewayBodyRes::release_msg_join_meeting_media_res() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayBodyRes.msg_join_meeting_media_res)
  _has_bits_[0] &= ~0x00000001u;
  ::tencent::media_gateway::access::JoinMeetingMediaRes* temp = msg_join_meeting_media_res_;
  msg_join_meeting_media_res_ = nullptr;
  return temp;
}
inline ::tencent::media_gateway::access::JoinMeetingMediaRes* MediaGatewayBodyRes::_internal_mutable_msg_join_meeting_media_res() {
  _has_bits_[0] |= 0x00000001u;
  if (msg_join_meeting_media_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::tencent::media_gateway::access::JoinMeetingMediaRes>(GetArenaNoVirtual());
    msg_join_meeting_media_res_ = p;
  }
  return msg_join_meeting_media_res_;
}
inline ::tencent::media_gateway::access::JoinMeetingMediaRes* MediaGatewayBodyRes::mutable_msg_join_meeting_media_res() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayBodyRes.msg_join_meeting_media_res)
  return _internal_mutable_msg_join_meeting_media_res();
}
inline void MediaGatewayBodyRes::set_allocated_msg_join_meeting_media_res(::tencent::media_gateway::access::JoinMeetingMediaRes* msg_join_meeting_media_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_join_meeting_media_res_;
  }
  if (msg_join_meeting_media_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_join_meeting_media_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_join_meeting_media_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_join_meeting_media_res_ = msg_join_meeting_media_res;
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayBodyRes.msg_join_meeting_media_res)
}

// optional .tencent.media_gateway.access.HelloRes msg_hello_res = 2;
inline bool MediaGatewayBodyRes::_internal_has_msg_hello_res() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || msg_hello_res_ != nullptr);
  return value;
}
inline bool MediaGatewayBodyRes::has_msg_hello_res() const {
  return _internal_has_msg_hello_res();
}
inline void MediaGatewayBodyRes::clear_msg_hello_res() {
  if (msg_hello_res_ != nullptr) msg_hello_res_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::tencent::media_gateway::access::HelloRes& MediaGatewayBodyRes::_internal_msg_hello_res() const {
  const ::tencent::media_gateway::access::HelloRes* p = msg_hello_res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tencent::media_gateway::access::HelloRes*>(
      &::tencent::media_gateway::access::_HelloRes_default_instance_);
}
inline const ::tencent::media_gateway::access::HelloRes& MediaGatewayBodyRes::msg_hello_res() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayBodyRes.msg_hello_res)
  return _internal_msg_hello_res();
}
inline ::tencent::media_gateway::access::HelloRes* MediaGatewayBodyRes::release_msg_hello_res() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayBodyRes.msg_hello_res)
  _has_bits_[0] &= ~0x00000002u;
  ::tencent::media_gateway::access::HelloRes* temp = msg_hello_res_;
  msg_hello_res_ = nullptr;
  return temp;
}
inline ::tencent::media_gateway::access::HelloRes* MediaGatewayBodyRes::_internal_mutable_msg_hello_res() {
  _has_bits_[0] |= 0x00000002u;
  if (msg_hello_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::tencent::media_gateway::access::HelloRes>(GetArenaNoVirtual());
    msg_hello_res_ = p;
  }
  return msg_hello_res_;
}
inline ::tencent::media_gateway::access::HelloRes* MediaGatewayBodyRes::mutable_msg_hello_res() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayBodyRes.msg_hello_res)
  return _internal_mutable_msg_hello_res();
}
inline void MediaGatewayBodyRes::set_allocated_msg_hello_res(::tencent::media_gateway::access::HelloRes* msg_hello_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_hello_res_;
  }
  if (msg_hello_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_hello_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_hello_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  msg_hello_res_ = msg_hello_res;
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayBodyRes.msg_hello_res)
}

// optional .tencent.media_gateway.access.SdpRes msg_sdp_res = 3;
inline bool MediaGatewayBodyRes::_internal_has_msg_sdp_res() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || msg_sdp_res_ != nullptr);
  return value;
}
inline bool MediaGatewayBodyRes::has_msg_sdp_res() const {
  return _internal_has_msg_sdp_res();
}
inline void MediaGatewayBodyRes::clear_msg_sdp_res() {
  if (msg_sdp_res_ != nullptr) msg_sdp_res_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::tencent::media_gateway::access::SdpRes& MediaGatewayBodyRes::_internal_msg_sdp_res() const {
  const ::tencent::media_gateway::access::SdpRes* p = msg_sdp_res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tencent::media_gateway::access::SdpRes*>(
      &::tencent::media_gateway::access::_SdpRes_default_instance_);
}
inline const ::tencent::media_gateway::access::SdpRes& MediaGatewayBodyRes::msg_sdp_res() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayBodyRes.msg_sdp_res)
  return _internal_msg_sdp_res();
}
inline ::tencent::media_gateway::access::SdpRes* MediaGatewayBodyRes::release_msg_sdp_res() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayBodyRes.msg_sdp_res)
  _has_bits_[0] &= ~0x00000004u;
  ::tencent::media_gateway::access::SdpRes* temp = msg_sdp_res_;
  msg_sdp_res_ = nullptr;
  return temp;
}
inline ::tencent::media_gateway::access::SdpRes* MediaGatewayBodyRes::_internal_mutable_msg_sdp_res() {
  _has_bits_[0] |= 0x00000004u;
  if (msg_sdp_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::tencent::media_gateway::access::SdpRes>(GetArenaNoVirtual());
    msg_sdp_res_ = p;
  }
  return msg_sdp_res_;
}
inline ::tencent::media_gateway::access::SdpRes* MediaGatewayBodyRes::mutable_msg_sdp_res() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayBodyRes.msg_sdp_res)
  return _internal_mutable_msg_sdp_res();
}
inline void MediaGatewayBodyRes::set_allocated_msg_sdp_res(::tencent::media_gateway::access::SdpRes* msg_sdp_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_sdp_res_;
  }
  if (msg_sdp_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_sdp_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_sdp_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  msg_sdp_res_ = msg_sdp_res;
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayBodyRes.msg_sdp_res)
}

// optional .tencent.media_gateway.access.S2CMediaBroadcastRes msg_s2c_media_broadcast_res = 4;
inline bool MediaGatewayBodyRes::_internal_has_msg_s2c_media_broadcast_res() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || msg_s2c_media_broadcast_res_ != nullptr);
  return value;
}
inline bool MediaGatewayBodyRes::has_msg_s2c_media_broadcast_res() const {
  return _internal_has_msg_s2c_media_broadcast_res();
}
inline void MediaGatewayBodyRes::clear_msg_s2c_media_broadcast_res() {
  if (msg_s2c_media_broadcast_res_ != nullptr) msg_s2c_media_broadcast_res_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::tencent::media_gateway::access::S2CMediaBroadcastRes& MediaGatewayBodyRes::_internal_msg_s2c_media_broadcast_res() const {
  const ::tencent::media_gateway::access::S2CMediaBroadcastRes* p = msg_s2c_media_broadcast_res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tencent::media_gateway::access::S2CMediaBroadcastRes*>(
      &::tencent::media_gateway::access::_S2CMediaBroadcastRes_default_instance_);
}
inline const ::tencent::media_gateway::access::S2CMediaBroadcastRes& MediaGatewayBodyRes::msg_s2c_media_broadcast_res() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayBodyRes.msg_s2c_media_broadcast_res)
  return _internal_msg_s2c_media_broadcast_res();
}
inline ::tencent::media_gateway::access::S2CMediaBroadcastRes* MediaGatewayBodyRes::release_msg_s2c_media_broadcast_res() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayBodyRes.msg_s2c_media_broadcast_res)
  _has_bits_[0] &= ~0x00000008u;
  ::tencent::media_gateway::access::S2CMediaBroadcastRes* temp = msg_s2c_media_broadcast_res_;
  msg_s2c_media_broadcast_res_ = nullptr;
  return temp;
}
inline ::tencent::media_gateway::access::S2CMediaBroadcastRes* MediaGatewayBodyRes::_internal_mutable_msg_s2c_media_broadcast_res() {
  _has_bits_[0] |= 0x00000008u;
  if (msg_s2c_media_broadcast_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::tencent::media_gateway::access::S2CMediaBroadcastRes>(GetArenaNoVirtual());
    msg_s2c_media_broadcast_res_ = p;
  }
  return msg_s2c_media_broadcast_res_;
}
inline ::tencent::media_gateway::access::S2CMediaBroadcastRes* MediaGatewayBodyRes::mutable_msg_s2c_media_broadcast_res() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayBodyRes.msg_s2c_media_broadcast_res)
  return _internal_mutable_msg_s2c_media_broadcast_res();
}
inline void MediaGatewayBodyRes::set_allocated_msg_s2c_media_broadcast_res(::tencent::media_gateway::access::S2CMediaBroadcastRes* msg_s2c_media_broadcast_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_s2c_media_broadcast_res_;
  }
  if (msg_s2c_media_broadcast_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_s2c_media_broadcast_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_s2c_media_broadcast_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  msg_s2c_media_broadcast_res_ = msg_s2c_media_broadcast_res;
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayBodyRes.msg_s2c_media_broadcast_res)
}

// optional .tencent.media_gateway.access.GetMediaBroadcastRes msg_get_media_broadcast_res = 5;
inline bool MediaGatewayBodyRes::_internal_has_msg_get_media_broadcast_res() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || msg_get_media_broadcast_res_ != nullptr);
  return value;
}
inline bool MediaGatewayBodyRes::has_msg_get_media_broadcast_res() const {
  return _internal_has_msg_get_media_broadcast_res();
}
inline void MediaGatewayBodyRes::clear_msg_get_media_broadcast_res() {
  if (msg_get_media_broadcast_res_ != nullptr) msg_get_media_broadcast_res_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::tencent::media_gateway::access::GetMediaBroadcastRes& MediaGatewayBodyRes::_internal_msg_get_media_broadcast_res() const {
  const ::tencent::media_gateway::access::GetMediaBroadcastRes* p = msg_get_media_broadcast_res_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tencent::media_gateway::access::GetMediaBroadcastRes*>(
      &::tencent::media_gateway::access::_GetMediaBroadcastRes_default_instance_);
}
inline const ::tencent::media_gateway::access::GetMediaBroadcastRes& MediaGatewayBodyRes::msg_get_media_broadcast_res() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.MediaGatewayBodyRes.msg_get_media_broadcast_res)
  return _internal_msg_get_media_broadcast_res();
}
inline ::tencent::media_gateway::access::GetMediaBroadcastRes* MediaGatewayBodyRes::release_msg_get_media_broadcast_res() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.MediaGatewayBodyRes.msg_get_media_broadcast_res)
  _has_bits_[0] &= ~0x00000010u;
  ::tencent::media_gateway::access::GetMediaBroadcastRes* temp = msg_get_media_broadcast_res_;
  msg_get_media_broadcast_res_ = nullptr;
  return temp;
}
inline ::tencent::media_gateway::access::GetMediaBroadcastRes* MediaGatewayBodyRes::_internal_mutable_msg_get_media_broadcast_res() {
  _has_bits_[0] |= 0x00000010u;
  if (msg_get_media_broadcast_res_ == nullptr) {
    auto* p = CreateMaybeMessage<::tencent::media_gateway::access::GetMediaBroadcastRes>(GetArenaNoVirtual());
    msg_get_media_broadcast_res_ = p;
  }
  return msg_get_media_broadcast_res_;
}
inline ::tencent::media_gateway::access::GetMediaBroadcastRes* MediaGatewayBodyRes::mutable_msg_get_media_broadcast_res() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.MediaGatewayBodyRes.msg_get_media_broadcast_res)
  return _internal_mutable_msg_get_media_broadcast_res();
}
inline void MediaGatewayBodyRes::set_allocated_msg_get_media_broadcast_res(::tencent::media_gateway::access::GetMediaBroadcastRes* msg_get_media_broadcast_res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_get_media_broadcast_res_;
  }
  if (msg_get_media_broadcast_res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_get_media_broadcast_res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_get_media_broadcast_res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  msg_get_media_broadcast_res_ = msg_get_media_broadcast_res;
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.MediaGatewayBodyRes.msg_get_media_broadcast_res)
}

// -------------------------------------------------------------------

// JoinMeetingMediaReq

// optional string str_os_verion = 1;
inline bool JoinMeetingMediaReq::_internal_has_str_os_verion() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JoinMeetingMediaReq::has_str_os_verion() const {
  return _internal_has_str_os_verion();
}
inline void JoinMeetingMediaReq::clear_str_os_verion() {
  str_os_verion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinMeetingMediaReq::str_os_verion() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.JoinMeetingMediaReq.str_os_verion)
  return _internal_str_os_verion();
}
inline void JoinMeetingMediaReq::set_str_os_verion(const std::string& value) {
  _internal_set_str_os_verion(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.JoinMeetingMediaReq.str_os_verion)
}
inline std::string* JoinMeetingMediaReq::mutable_str_os_verion() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.JoinMeetingMediaReq.str_os_verion)
  return _internal_mutable_str_os_verion();
}
inline const std::string& JoinMeetingMediaReq::_internal_str_os_verion() const {
  return str_os_verion_.GetNoArena();
}
inline void JoinMeetingMediaReq::_internal_set_str_os_verion(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_os_verion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JoinMeetingMediaReq::set_str_os_verion(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_os_verion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.JoinMeetingMediaReq.str_os_verion)
}
inline void JoinMeetingMediaReq::set_str_os_verion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_os_verion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.JoinMeetingMediaReq.str_os_verion)
}
inline void JoinMeetingMediaReq::set_str_os_verion(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_os_verion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.JoinMeetingMediaReq.str_os_verion)
}
inline std::string* JoinMeetingMediaReq::_internal_mutable_str_os_verion() {
  _has_bits_[0] |= 0x00000001u;
  return str_os_verion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinMeetingMediaReq::release_str_os_verion() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.JoinMeetingMediaReq.str_os_verion)
  if (!_internal_has_str_os_verion()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_os_verion_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinMeetingMediaReq::set_allocated_str_os_verion(std::string* str_os_verion) {
  if (str_os_verion != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_os_verion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_os_verion);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.JoinMeetingMediaReq.str_os_verion)
}

// optional string str_device_name = 2;
inline bool JoinMeetingMediaReq::_internal_has_str_device_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool JoinMeetingMediaReq::has_str_device_name() const {
  return _internal_has_str_device_name();
}
inline void JoinMeetingMediaReq::clear_str_device_name() {
  str_device_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& JoinMeetingMediaReq::str_device_name() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.JoinMeetingMediaReq.str_device_name)
  return _internal_str_device_name();
}
inline void JoinMeetingMediaReq::set_str_device_name(const std::string& value) {
  _internal_set_str_device_name(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.JoinMeetingMediaReq.str_device_name)
}
inline std::string* JoinMeetingMediaReq::mutable_str_device_name() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.JoinMeetingMediaReq.str_device_name)
  return _internal_mutable_str_device_name();
}
inline const std::string& JoinMeetingMediaReq::_internal_str_device_name() const {
  return str_device_name_.GetNoArena();
}
inline void JoinMeetingMediaReq::_internal_set_str_device_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  str_device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JoinMeetingMediaReq::set_str_device_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  str_device_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.JoinMeetingMediaReq.str_device_name)
}
inline void JoinMeetingMediaReq::set_str_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  str_device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.JoinMeetingMediaReq.str_device_name)
}
inline void JoinMeetingMediaReq::set_str_device_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  str_device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.JoinMeetingMediaReq.str_device_name)
}
inline std::string* JoinMeetingMediaReq::_internal_mutable_str_device_name() {
  _has_bits_[0] |= 0x00000002u;
  return str_device_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinMeetingMediaReq::release_str_device_name() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.JoinMeetingMediaReq.str_device_name)
  if (!_internal_has_str_device_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return str_device_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinMeetingMediaReq::set_allocated_str_device_name(std::string* str_device_name) {
  if (str_device_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  str_device_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_device_name);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.JoinMeetingMediaReq.str_device_name)
}

// optional string str_screen_name = 11;
inline bool JoinMeetingMediaReq::_internal_has_str_screen_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool JoinMeetingMediaReq::has_str_screen_name() const {
  return _internal_has_str_screen_name();
}
inline void JoinMeetingMediaReq::clear_str_screen_name() {
  str_screen_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& JoinMeetingMediaReq::str_screen_name() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.JoinMeetingMediaReq.str_screen_name)
  return _internal_str_screen_name();
}
inline void JoinMeetingMediaReq::set_str_screen_name(const std::string& value) {
  _internal_set_str_screen_name(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.JoinMeetingMediaReq.str_screen_name)
}
inline std::string* JoinMeetingMediaReq::mutable_str_screen_name() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.JoinMeetingMediaReq.str_screen_name)
  return _internal_mutable_str_screen_name();
}
inline const std::string& JoinMeetingMediaReq::_internal_str_screen_name() const {
  return str_screen_name_.GetNoArena();
}
inline void JoinMeetingMediaReq::_internal_set_str_screen_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  str_screen_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JoinMeetingMediaReq::set_str_screen_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  str_screen_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.JoinMeetingMediaReq.str_screen_name)
}
inline void JoinMeetingMediaReq::set_str_screen_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  str_screen_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.JoinMeetingMediaReq.str_screen_name)
}
inline void JoinMeetingMediaReq::set_str_screen_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  str_screen_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.JoinMeetingMediaReq.str_screen_name)
}
inline std::string* JoinMeetingMediaReq::_internal_mutable_str_screen_name() {
  _has_bits_[0] |= 0x00000004u;
  return str_screen_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinMeetingMediaReq::release_str_screen_name() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.JoinMeetingMediaReq.str_screen_name)
  if (!_internal_has_str_screen_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return str_screen_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinMeetingMediaReq::set_allocated_str_screen_name(std::string* str_screen_name) {
  if (str_screen_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  str_screen_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_screen_name);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.JoinMeetingMediaReq.str_screen_name)
}

// optional uint32 uint32_screen_width = 12;
inline bool JoinMeetingMediaReq::_internal_has_uint32_screen_width() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool JoinMeetingMediaReq::has_uint32_screen_width() const {
  return _internal_has_uint32_screen_width();
}
inline void JoinMeetingMediaReq::clear_uint32_screen_width() {
  uint32_screen_width_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinMeetingMediaReq::_internal_uint32_screen_width() const {
  return uint32_screen_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinMeetingMediaReq::uint32_screen_width() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.JoinMeetingMediaReq.uint32_screen_width)
  return _internal_uint32_screen_width();
}
inline void JoinMeetingMediaReq::_internal_set_uint32_screen_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  uint32_screen_width_ = value;
}
inline void JoinMeetingMediaReq::set_uint32_screen_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_screen_width(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.JoinMeetingMediaReq.uint32_screen_width)
}

// optional uint32 uint32_screen_height = 13;
inline bool JoinMeetingMediaReq::_internal_has_uint32_screen_height() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool JoinMeetingMediaReq::has_uint32_screen_height() const {
  return _internal_has_uint32_screen_height();
}
inline void JoinMeetingMediaReq::clear_uint32_screen_height() {
  uint32_screen_height_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinMeetingMediaReq::_internal_uint32_screen_height() const {
  return uint32_screen_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinMeetingMediaReq::uint32_screen_height() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.JoinMeetingMediaReq.uint32_screen_height)
  return _internal_uint32_screen_height();
}
inline void JoinMeetingMediaReq::_internal_set_uint32_screen_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  uint32_screen_height_ = value;
}
inline void JoinMeetingMediaReq::set_uint32_screen_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_screen_height(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.JoinMeetingMediaReq.uint32_screen_height)
}

// optional string str_camera_name = 21;
inline bool JoinMeetingMediaReq::_internal_has_str_camera_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool JoinMeetingMediaReq::has_str_camera_name() const {
  return _internal_has_str_camera_name();
}
inline void JoinMeetingMediaReq::clear_str_camera_name() {
  str_camera_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& JoinMeetingMediaReq::str_camera_name() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.JoinMeetingMediaReq.str_camera_name)
  return _internal_str_camera_name();
}
inline void JoinMeetingMediaReq::set_str_camera_name(const std::string& value) {
  _internal_set_str_camera_name(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.JoinMeetingMediaReq.str_camera_name)
}
inline std::string* JoinMeetingMediaReq::mutable_str_camera_name() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.JoinMeetingMediaReq.str_camera_name)
  return _internal_mutable_str_camera_name();
}
inline const std::string& JoinMeetingMediaReq::_internal_str_camera_name() const {
  return str_camera_name_.GetNoArena();
}
inline void JoinMeetingMediaReq::_internal_set_str_camera_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  str_camera_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JoinMeetingMediaReq::set_str_camera_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  str_camera_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.JoinMeetingMediaReq.str_camera_name)
}
inline void JoinMeetingMediaReq::set_str_camera_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  str_camera_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.JoinMeetingMediaReq.str_camera_name)
}
inline void JoinMeetingMediaReq::set_str_camera_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  str_camera_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.JoinMeetingMediaReq.str_camera_name)
}
inline std::string* JoinMeetingMediaReq::_internal_mutable_str_camera_name() {
  _has_bits_[0] |= 0x00000008u;
  return str_camera_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinMeetingMediaReq::release_str_camera_name() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.JoinMeetingMediaReq.str_camera_name)
  if (!_internal_has_str_camera_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return str_camera_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinMeetingMediaReq::set_allocated_str_camera_name(std::string* str_camera_name) {
  if (str_camera_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  str_camera_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_camera_name);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.JoinMeetingMediaReq.str_camera_name)
}

// optional uint32 uint32_camera_width = 22;
inline bool JoinMeetingMediaReq::_internal_has_uint32_camera_width() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool JoinMeetingMediaReq::has_uint32_camera_width() const {
  return _internal_has_uint32_camera_width();
}
inline void JoinMeetingMediaReq::clear_uint32_camera_width() {
  uint32_camera_width_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinMeetingMediaReq::_internal_uint32_camera_width() const {
  return uint32_camera_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinMeetingMediaReq::uint32_camera_width() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.JoinMeetingMediaReq.uint32_camera_width)
  return _internal_uint32_camera_width();
}
inline void JoinMeetingMediaReq::_internal_set_uint32_camera_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  uint32_camera_width_ = value;
}
inline void JoinMeetingMediaReq::set_uint32_camera_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_camera_width(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.JoinMeetingMediaReq.uint32_camera_width)
}

// optional uint32 uint32_camera_height = 23;
inline bool JoinMeetingMediaReq::_internal_has_uint32_camera_height() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool JoinMeetingMediaReq::has_uint32_camera_height() const {
  return _internal_has_uint32_camera_height();
}
inline void JoinMeetingMediaReq::clear_uint32_camera_height() {
  uint32_camera_height_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinMeetingMediaReq::_internal_uint32_camera_height() const {
  return uint32_camera_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinMeetingMediaReq::uint32_camera_height() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.JoinMeetingMediaReq.uint32_camera_height)
  return _internal_uint32_camera_height();
}
inline void JoinMeetingMediaReq::_internal_set_uint32_camera_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  uint32_camera_height_ = value;
}
inline void JoinMeetingMediaReq::set_uint32_camera_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_camera_height(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.JoinMeetingMediaReq.uint32_camera_height)
}

// optional string str_speaker_name = 31;
inline bool JoinMeetingMediaReq::_internal_has_str_speaker_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool JoinMeetingMediaReq::has_str_speaker_name() const {
  return _internal_has_str_speaker_name();
}
inline void JoinMeetingMediaReq::clear_str_speaker_name() {
  str_speaker_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& JoinMeetingMediaReq::str_speaker_name() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.JoinMeetingMediaReq.str_speaker_name)
  return _internal_str_speaker_name();
}
inline void JoinMeetingMediaReq::set_str_speaker_name(const std::string& value) {
  _internal_set_str_speaker_name(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.JoinMeetingMediaReq.str_speaker_name)
}
inline std::string* JoinMeetingMediaReq::mutable_str_speaker_name() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.JoinMeetingMediaReq.str_speaker_name)
  return _internal_mutable_str_speaker_name();
}
inline const std::string& JoinMeetingMediaReq::_internal_str_speaker_name() const {
  return str_speaker_name_.GetNoArena();
}
inline void JoinMeetingMediaReq::_internal_set_str_speaker_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  str_speaker_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JoinMeetingMediaReq::set_str_speaker_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  str_speaker_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.JoinMeetingMediaReq.str_speaker_name)
}
inline void JoinMeetingMediaReq::set_str_speaker_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  str_speaker_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.JoinMeetingMediaReq.str_speaker_name)
}
inline void JoinMeetingMediaReq::set_str_speaker_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  str_speaker_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.JoinMeetingMediaReq.str_speaker_name)
}
inline std::string* JoinMeetingMediaReq::_internal_mutable_str_speaker_name() {
  _has_bits_[0] |= 0x00000010u;
  return str_speaker_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinMeetingMediaReq::release_str_speaker_name() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.JoinMeetingMediaReq.str_speaker_name)
  if (!_internal_has_str_speaker_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return str_speaker_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinMeetingMediaReq::set_allocated_str_speaker_name(std::string* str_speaker_name) {
  if (str_speaker_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  str_speaker_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_speaker_name);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.JoinMeetingMediaReq.str_speaker_name)
}

// optional string str_mic_name = 41;
inline bool JoinMeetingMediaReq::_internal_has_str_mic_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool JoinMeetingMediaReq::has_str_mic_name() const {
  return _internal_has_str_mic_name();
}
inline void JoinMeetingMediaReq::clear_str_mic_name() {
  str_mic_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& JoinMeetingMediaReq::str_mic_name() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.JoinMeetingMediaReq.str_mic_name)
  return _internal_str_mic_name();
}
inline void JoinMeetingMediaReq::set_str_mic_name(const std::string& value) {
  _internal_set_str_mic_name(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.JoinMeetingMediaReq.str_mic_name)
}
inline std::string* JoinMeetingMediaReq::mutable_str_mic_name() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.JoinMeetingMediaReq.str_mic_name)
  return _internal_mutable_str_mic_name();
}
inline const std::string& JoinMeetingMediaReq::_internal_str_mic_name() const {
  return str_mic_name_.GetNoArena();
}
inline void JoinMeetingMediaReq::_internal_set_str_mic_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  str_mic_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JoinMeetingMediaReq::set_str_mic_name(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  str_mic_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.JoinMeetingMediaReq.str_mic_name)
}
inline void JoinMeetingMediaReq::set_str_mic_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  str_mic_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.JoinMeetingMediaReq.str_mic_name)
}
inline void JoinMeetingMediaReq::set_str_mic_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  str_mic_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.JoinMeetingMediaReq.str_mic_name)
}
inline std::string* JoinMeetingMediaReq::_internal_mutable_str_mic_name() {
  _has_bits_[0] |= 0x00000020u;
  return str_mic_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JoinMeetingMediaReq::release_str_mic_name() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.JoinMeetingMediaReq.str_mic_name)
  if (!_internal_has_str_mic_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return str_mic_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JoinMeetingMediaReq::set_allocated_str_mic_name(std::string* str_mic_name) {
  if (str_mic_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  str_mic_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_mic_name);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.JoinMeetingMediaReq.str_mic_name)
}

// -------------------------------------------------------------------

// JoinMeetingMediaRes

// -------------------------------------------------------------------

// HelloReq

// -------------------------------------------------------------------

// HelloRes

// optional uint32 uint32_client_ip = 1;
inline bool HelloRes::_internal_has_uint32_client_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HelloRes::has_uint32_client_ip() const {
  return _internal_has_uint32_client_ip();
}
inline void HelloRes::clear_uint32_client_ip() {
  uint32_client_ip_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HelloRes::_internal_uint32_client_ip() const {
  return uint32_client_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HelloRes::uint32_client_ip() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.HelloRes.uint32_client_ip)
  return _internal_uint32_client_ip();
}
inline void HelloRes::_internal_set_uint32_client_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  uint32_client_ip_ = value;
}
inline void HelloRes::set_uint32_client_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_client_ip(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.HelloRes.uint32_client_ip)
}

// optional uint32 uint32_client_port = 2;
inline bool HelloRes::_internal_has_uint32_client_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HelloRes::has_uint32_client_port() const {
  return _internal_has_uint32_client_port();
}
inline void HelloRes::clear_uint32_client_port() {
  uint32_client_port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HelloRes::_internal_uint32_client_port() const {
  return uint32_client_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HelloRes::uint32_client_port() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.HelloRes.uint32_client_port)
  return _internal_uint32_client_port();
}
inline void HelloRes::_internal_set_uint32_client_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  uint32_client_port_ = value;
}
inline void HelloRes::set_uint32_client_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_client_port(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.HelloRes.uint32_client_port)
}

// optional uint32 uint32_interval = 3;
inline bool HelloRes::_internal_has_uint32_interval() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HelloRes::has_uint32_interval() const {
  return _internal_has_uint32_interval();
}
inline void HelloRes::clear_uint32_interval() {
  uint32_interval_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HelloRes::_internal_uint32_interval() const {
  return uint32_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HelloRes::uint32_interval() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.HelloRes.uint32_interval)
  return _internal_uint32_interval();
}
inline void HelloRes::_internal_set_uint32_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  uint32_interval_ = value;
}
inline void HelloRes::set_uint32_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_interval(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.HelloRes.uint32_interval)
}

// -------------------------------------------------------------------

// SdpReq

// optional string str_sdp_offer = 1;
inline bool SdpReq::_internal_has_str_sdp_offer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SdpReq::has_str_sdp_offer() const {
  return _internal_has_str_sdp_offer();
}
inline void SdpReq::clear_str_sdp_offer() {
  str_sdp_offer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SdpReq::str_sdp_offer() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.SdpReq.str_sdp_offer)
  return _internal_str_sdp_offer();
}
inline void SdpReq::set_str_sdp_offer(const std::string& value) {
  _internal_set_str_sdp_offer(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.SdpReq.str_sdp_offer)
}
inline std::string* SdpReq::mutable_str_sdp_offer() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.SdpReq.str_sdp_offer)
  return _internal_mutable_str_sdp_offer();
}
inline const std::string& SdpReq::_internal_str_sdp_offer() const {
  return str_sdp_offer_.GetNoArena();
}
inline void SdpReq::_internal_set_str_sdp_offer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_sdp_offer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SdpReq::set_str_sdp_offer(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_sdp_offer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.SdpReq.str_sdp_offer)
}
inline void SdpReq::set_str_sdp_offer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_sdp_offer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.SdpReq.str_sdp_offer)
}
inline void SdpReq::set_str_sdp_offer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_sdp_offer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.SdpReq.str_sdp_offer)
}
inline std::string* SdpReq::_internal_mutable_str_sdp_offer() {
  _has_bits_[0] |= 0x00000001u;
  return str_sdp_offer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SdpReq::release_str_sdp_offer() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.SdpReq.str_sdp_offer)
  if (!_internal_has_str_sdp_offer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_sdp_offer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SdpReq::set_allocated_str_sdp_offer(std::string* str_sdp_offer) {
  if (str_sdp_offer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_sdp_offer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_sdp_offer);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.SdpReq.str_sdp_offer)
}

// -------------------------------------------------------------------

// SdpRes

// optional string str_sdp_answer = 1;
inline bool SdpRes::_internal_has_str_sdp_answer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SdpRes::has_str_sdp_answer() const {
  return _internal_has_str_sdp_answer();
}
inline void SdpRes::clear_str_sdp_answer() {
  str_sdp_answer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SdpRes::str_sdp_answer() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.SdpRes.str_sdp_answer)
  return _internal_str_sdp_answer();
}
inline void SdpRes::set_str_sdp_answer(const std::string& value) {
  _internal_set_str_sdp_answer(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.SdpRes.str_sdp_answer)
}
inline std::string* SdpRes::mutable_str_sdp_answer() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.SdpRes.str_sdp_answer)
  return _internal_mutable_str_sdp_answer();
}
inline const std::string& SdpRes::_internal_str_sdp_answer() const {
  return str_sdp_answer_.GetNoArena();
}
inline void SdpRes::_internal_set_str_sdp_answer(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_sdp_answer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SdpRes::set_str_sdp_answer(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_sdp_answer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.SdpRes.str_sdp_answer)
}
inline void SdpRes::set_str_sdp_answer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_sdp_answer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.SdpRes.str_sdp_answer)
}
inline void SdpRes::set_str_sdp_answer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_sdp_answer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.SdpRes.str_sdp_answer)
}
inline std::string* SdpRes::_internal_mutable_str_sdp_answer() {
  _has_bits_[0] |= 0x00000001u;
  return str_sdp_answer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SdpRes::release_str_sdp_answer() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.SdpRes.str_sdp_answer)
  if (!_internal_has_str_sdp_answer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_sdp_answer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SdpRes::set_allocated_str_sdp_answer(std::string* str_sdp_answer) {
  if (str_sdp_answer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_sdp_answer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_sdp_answer);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.SdpRes.str_sdp_answer)
}

// -------------------------------------------------------------------

// S2CMediaBroadcastReq

// optional string str_sdp = 1;
inline bool S2CMediaBroadcastReq::_internal_has_str_sdp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool S2CMediaBroadcastReq::has_str_sdp() const {
  return _internal_has_str_sdp();
}
inline void S2CMediaBroadcastReq::clear_str_sdp() {
  str_sdp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& S2CMediaBroadcastReq::str_sdp() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.S2CMediaBroadcastReq.str_sdp)
  return _internal_str_sdp();
}
inline void S2CMediaBroadcastReq::set_str_sdp(const std::string& value) {
  _internal_set_str_sdp(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.S2CMediaBroadcastReq.str_sdp)
}
inline std::string* S2CMediaBroadcastReq::mutable_str_sdp() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.S2CMediaBroadcastReq.str_sdp)
  return _internal_mutable_str_sdp();
}
inline const std::string& S2CMediaBroadcastReq::_internal_str_sdp() const {
  return str_sdp_.GetNoArena();
}
inline void S2CMediaBroadcastReq::_internal_set_str_sdp(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_sdp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void S2CMediaBroadcastReq::set_str_sdp(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_sdp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.S2CMediaBroadcastReq.str_sdp)
}
inline void S2CMediaBroadcastReq::set_str_sdp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_sdp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.S2CMediaBroadcastReq.str_sdp)
}
inline void S2CMediaBroadcastReq::set_str_sdp(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_sdp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.S2CMediaBroadcastReq.str_sdp)
}
inline std::string* S2CMediaBroadcastReq::_internal_mutable_str_sdp() {
  _has_bits_[0] |= 0x00000001u;
  return str_sdp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* S2CMediaBroadcastReq::release_str_sdp() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.S2CMediaBroadcastReq.str_sdp)
  if (!_internal_has_str_sdp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_sdp_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void S2CMediaBroadcastReq::set_allocated_str_sdp(std::string* str_sdp) {
  if (str_sdp != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_sdp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_sdp);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.S2CMediaBroadcastReq.str_sdp)
}

// -------------------------------------------------------------------

// S2CMediaBroadcastRes

// -------------------------------------------------------------------

// GetMediaBroadcastReq

// -------------------------------------------------------------------

// GetMediaBroadcastRes

// optional string str_sdp = 1;
inline bool GetMediaBroadcastRes::_internal_has_str_sdp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetMediaBroadcastRes::has_str_sdp() const {
  return _internal_has_str_sdp();
}
inline void GetMediaBroadcastRes::clear_str_sdp() {
  str_sdp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetMediaBroadcastRes::str_sdp() const {
  // @@protoc_insertion_point(field_get:tencent.media_gateway.access.GetMediaBroadcastRes.str_sdp)
  return _internal_str_sdp();
}
inline void GetMediaBroadcastRes::set_str_sdp(const std::string& value) {
  _internal_set_str_sdp(value);
  // @@protoc_insertion_point(field_set:tencent.media_gateway.access.GetMediaBroadcastRes.str_sdp)
}
inline std::string* GetMediaBroadcastRes::mutable_str_sdp() {
  // @@protoc_insertion_point(field_mutable:tencent.media_gateway.access.GetMediaBroadcastRes.str_sdp)
  return _internal_mutable_str_sdp();
}
inline const std::string& GetMediaBroadcastRes::_internal_str_sdp() const {
  return str_sdp_.GetNoArena();
}
inline void GetMediaBroadcastRes::_internal_set_str_sdp(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_sdp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetMediaBroadcastRes::set_str_sdp(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_sdp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tencent.media_gateway.access.GetMediaBroadcastRes.str_sdp)
}
inline void GetMediaBroadcastRes::set_str_sdp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_sdp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tencent.media_gateway.access.GetMediaBroadcastRes.str_sdp)
}
inline void GetMediaBroadcastRes::set_str_sdp(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_sdp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tencent.media_gateway.access.GetMediaBroadcastRes.str_sdp)
}
inline std::string* GetMediaBroadcastRes::_internal_mutable_str_sdp() {
  _has_bits_[0] |= 0x00000001u;
  return str_sdp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMediaBroadcastRes::release_str_sdp() {
  // @@protoc_insertion_point(field_release:tencent.media_gateway.access.GetMediaBroadcastRes.str_sdp)
  if (!_internal_has_str_sdp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_sdp_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMediaBroadcastRes::set_allocated_str_sdp(std::string* str_sdp) {
  if (str_sdp != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_sdp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_sdp);
  // @@protoc_insertion_point(field_set_allocated:tencent.media_gateway.access.GetMediaBroadcastRes.str_sdp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace access
}  // namespace media_gateway
}  // namespace tencent

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tencent::media_gateway::access::C2S_MEDIA_GATAWAY_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tencent::media_gateway::access::C2S_MEDIA_GATAWAY_CMD>() {
  return ::tencent::media_gateway::access::C2S_MEDIA_GATAWAY_CMD_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_media_5fgateway_5faccess_2eproto
