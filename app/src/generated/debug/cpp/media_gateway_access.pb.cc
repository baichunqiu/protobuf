// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media_gateway_access.proto

#include "media_gateway_access.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_media_5fgateway_5faccess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMediaBroadcastReq_media_5fgateway_5faccess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fgateway_5faccess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMediaBroadcastRes_media_5fgateway_5faccess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fgateway_5faccess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloReq_media_5fgateway_5faccess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fgateway_5faccess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloRes_media_5fgateway_5faccess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fgateway_5faccess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinMeetingMediaReq_media_5fgateway_5faccess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fgateway_5faccess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinMeetingMediaRes_media_5fgateway_5faccess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fgateway_5faccess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2CMediaBroadcastReq_media_5fgateway_5faccess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fgateway_5faccess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2CMediaBroadcastRes_media_5fgateway_5faccess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fgateway_5faccess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdpReq_media_5fgateway_5faccess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fgateway_5faccess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdpRes_media_5fgateway_5faccess_2eproto;
namespace tencent {
namespace media_gateway {
namespace access {
class MediaGatewayHeadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaGatewayHead> _instance;
} _MediaGatewayHead_default_instance_;
class MediaGatewayBodyReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaGatewayBodyReq> _instance;
} _MediaGatewayBodyReq_default_instance_;
class MediaGatewayBodyResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaGatewayBodyRes> _instance;
} _MediaGatewayBodyRes_default_instance_;
class JoinMeetingMediaReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinMeetingMediaReq> _instance;
} _JoinMeetingMediaReq_default_instance_;
class JoinMeetingMediaResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinMeetingMediaRes> _instance;
} _JoinMeetingMediaRes_default_instance_;
class HelloReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HelloReq> _instance;
} _HelloReq_default_instance_;
class HelloResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HelloRes> _instance;
} _HelloRes_default_instance_;
class SdpReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SdpReq> _instance;
} _SdpReq_default_instance_;
class SdpResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SdpRes> _instance;
} _SdpRes_default_instance_;
class S2CMediaBroadcastReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2CMediaBroadcastReq> _instance;
} _S2CMediaBroadcastReq_default_instance_;
class S2CMediaBroadcastResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2CMediaBroadcastRes> _instance;
} _S2CMediaBroadcastRes_default_instance_;
class GetMediaBroadcastReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMediaBroadcastReq> _instance;
} _GetMediaBroadcastReq_default_instance_;
class GetMediaBroadcastResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMediaBroadcastRes> _instance;
} _GetMediaBroadcastRes_default_instance_;
}  // namespace access
}  // namespace media_gateway
}  // namespace tencent
static void InitDefaultsscc_info_GetMediaBroadcastReq_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_GetMediaBroadcastReq_default_instance_;
    new (ptr) ::tencent::media_gateway::access::GetMediaBroadcastReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::GetMediaBroadcastReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMediaBroadcastReq_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMediaBroadcastReq_media_5fgateway_5faccess_2eproto}, {}};

static void InitDefaultsscc_info_GetMediaBroadcastRes_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_GetMediaBroadcastRes_default_instance_;
    new (ptr) ::tencent::media_gateway::access::GetMediaBroadcastRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::GetMediaBroadcastRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMediaBroadcastRes_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMediaBroadcastRes_media_5fgateway_5faccess_2eproto}, {}};

static void InitDefaultsscc_info_HelloReq_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_HelloReq_default_instance_;
    new (ptr) ::tencent::media_gateway::access::HelloReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::HelloReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloReq_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HelloReq_media_5fgateway_5faccess_2eproto}, {}};

static void InitDefaultsscc_info_HelloRes_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_HelloRes_default_instance_;
    new (ptr) ::tencent::media_gateway::access::HelloRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::HelloRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloRes_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HelloRes_media_5fgateway_5faccess_2eproto}, {}};

static void InitDefaultsscc_info_JoinMeetingMediaReq_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_JoinMeetingMediaReq_default_instance_;
    new (ptr) ::tencent::media_gateway::access::JoinMeetingMediaReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::JoinMeetingMediaReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinMeetingMediaReq_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinMeetingMediaReq_media_5fgateway_5faccess_2eproto}, {}};

static void InitDefaultsscc_info_JoinMeetingMediaRes_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_JoinMeetingMediaRes_default_instance_;
    new (ptr) ::tencent::media_gateway::access::JoinMeetingMediaRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::JoinMeetingMediaRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinMeetingMediaRes_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinMeetingMediaRes_media_5fgateway_5faccess_2eproto}, {}};

static void InitDefaultsscc_info_MediaGatewayBodyReq_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_MediaGatewayBodyReq_default_instance_;
    new (ptr) ::tencent::media_gateway::access::MediaGatewayBodyReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::MediaGatewayBodyReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MediaGatewayBodyReq_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_MediaGatewayBodyReq_media_5fgateway_5faccess_2eproto}, {
      &scc_info_JoinMeetingMediaReq_media_5fgateway_5faccess_2eproto.base,
      &scc_info_HelloReq_media_5fgateway_5faccess_2eproto.base,
      &scc_info_SdpReq_media_5fgateway_5faccess_2eproto.base,
      &scc_info_S2CMediaBroadcastReq_media_5fgateway_5faccess_2eproto.base,
      &scc_info_GetMediaBroadcastReq_media_5fgateway_5faccess_2eproto.base,}};

static void InitDefaultsscc_info_MediaGatewayBodyRes_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_MediaGatewayBodyRes_default_instance_;
    new (ptr) ::tencent::media_gateway::access::MediaGatewayBodyRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::MediaGatewayBodyRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MediaGatewayBodyRes_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_MediaGatewayBodyRes_media_5fgateway_5faccess_2eproto}, {
      &scc_info_JoinMeetingMediaRes_media_5fgateway_5faccess_2eproto.base,
      &scc_info_HelloRes_media_5fgateway_5faccess_2eproto.base,
      &scc_info_SdpRes_media_5fgateway_5faccess_2eproto.base,
      &scc_info_S2CMediaBroadcastRes_media_5fgateway_5faccess_2eproto.base,
      &scc_info_GetMediaBroadcastRes_media_5fgateway_5faccess_2eproto.base,}};

static void InitDefaultsscc_info_MediaGatewayHead_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_MediaGatewayHead_default_instance_;
    new (ptr) ::tencent::media_gateway::access::MediaGatewayHead();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::MediaGatewayHead::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MediaGatewayHead_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MediaGatewayHead_media_5fgateway_5faccess_2eproto}, {}};

static void InitDefaultsscc_info_S2CMediaBroadcastReq_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_S2CMediaBroadcastReq_default_instance_;
    new (ptr) ::tencent::media_gateway::access::S2CMediaBroadcastReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::S2CMediaBroadcastReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2CMediaBroadcastReq_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2CMediaBroadcastReq_media_5fgateway_5faccess_2eproto}, {}};

static void InitDefaultsscc_info_S2CMediaBroadcastRes_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_S2CMediaBroadcastRes_default_instance_;
    new (ptr) ::tencent::media_gateway::access::S2CMediaBroadcastRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::S2CMediaBroadcastRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2CMediaBroadcastRes_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2CMediaBroadcastRes_media_5fgateway_5faccess_2eproto}, {}};

static void InitDefaultsscc_info_SdpReq_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_SdpReq_default_instance_;
    new (ptr) ::tencent::media_gateway::access::SdpReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::SdpReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdpReq_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SdpReq_media_5fgateway_5faccess_2eproto}, {}};

static void InitDefaultsscc_info_SdpRes_media_5fgateway_5faccess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tencent::media_gateway::access::_SdpRes_default_instance_;
    new (ptr) ::tencent::media_gateway::access::SdpRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tencent::media_gateway::access::SdpRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdpRes_media_5fgateway_5faccess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SdpRes_media_5fgateway_5faccess_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_media_5fgateway_5faccess_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_media_5fgateway_5faccess_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_media_5fgateway_5faccess_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_media_5fgateway_5faccess_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, uint32_sdkid_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, uint32_sdk_ver_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, uint32_seq_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, uint32_cmd_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, uint32_crop_id_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, str_user_id_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, uint64_meeting_id_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, bytes_media_gateway_token_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, uint32_error_code_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayHead, str_error_string_),
  3,
  4,
  5,
  6,
  8,
  0,
  7,
  1,
  9,
  2,
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyReq, msg_join_meeting_media_req_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyReq, msg_hello_req_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyReq, msg_sdp_req_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyReq, msg_s2c_media_broadcast_req_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyReq, msg_get_media_broadcast_req_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyRes, msg_join_meeting_media_res_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyRes, msg_hello_res_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyRes, msg_sdp_res_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyRes, msg_s2c_media_broadcast_res_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::MediaGatewayBodyRes, msg_get_media_broadcast_res_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaReq, str_os_verion_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaReq, str_device_name_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaReq, str_screen_name_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaReq, uint32_screen_width_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaReq, uint32_screen_height_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaReq, str_camera_name_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaReq, uint32_camera_width_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaReq, uint32_camera_height_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaReq, str_speaker_name_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaReq, str_mic_name_),
  0,
  1,
  2,
  6,
  7,
  3,
  8,
  9,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::JoinMeetingMediaRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::HelloReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::HelloReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::HelloRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::HelloRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::HelloRes, uint32_client_ip_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::HelloRes, uint32_client_port_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::HelloRes, uint32_interval_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::SdpReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::SdpReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::SdpReq, str_sdp_offer_),
  0,
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::SdpRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::SdpRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::SdpRes, str_sdp_answer_),
  0,
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::S2CMediaBroadcastReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::S2CMediaBroadcastReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::S2CMediaBroadcastReq, str_sdp_),
  0,
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::S2CMediaBroadcastRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::S2CMediaBroadcastRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::GetMediaBroadcastReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::GetMediaBroadcastReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::GetMediaBroadcastRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::GetMediaBroadcastRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tencent::media_gateway::access::GetMediaBroadcastRes, str_sdp_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::tencent::media_gateway::access::MediaGatewayHead)},
  { 25, 35, sizeof(::tencent::media_gateway::access::MediaGatewayBodyReq)},
  { 40, 50, sizeof(::tencent::media_gateway::access::MediaGatewayBodyRes)},
  { 55, 70, sizeof(::tencent::media_gateway::access::JoinMeetingMediaReq)},
  { 80, 85, sizeof(::tencent::media_gateway::access::JoinMeetingMediaRes)},
  { 85, 90, sizeof(::tencent::media_gateway::access::HelloReq)},
  { 90, 98, sizeof(::tencent::media_gateway::access::HelloRes)},
  { 101, 107, sizeof(::tencent::media_gateway::access::SdpReq)},
  { 108, 114, sizeof(::tencent::media_gateway::access::SdpRes)},
  { 115, 121, sizeof(::tencent::media_gateway::access::S2CMediaBroadcastReq)},
  { 122, 127, sizeof(::tencent::media_gateway::access::S2CMediaBroadcastRes)},
  { 127, 132, sizeof(::tencent::media_gateway::access::GetMediaBroadcastReq)},
  { 132, 138, sizeof(::tencent::media_gateway::access::GetMediaBroadcastRes)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_MediaGatewayHead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_MediaGatewayBodyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_MediaGatewayBodyRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_JoinMeetingMediaReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_JoinMeetingMediaRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_HelloReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_HelloRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_SdpReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_SdpRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_S2CMediaBroadcastReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_S2CMediaBroadcastRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_GetMediaBroadcastReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tencent::media_gateway::access::_GetMediaBroadcastRes_default_instance_),
};

const char descriptor_table_protodef_media_5fgateway_5faccess_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032media_gateway_access.proto\022\034tencent.me"
  "dia_gateway.access\"\221\002\n\020MediaGatewayHead\022"
  "\024\n\014uint32_sdkid\030\001 \001(\r\022\026\n\016uint32_sdk_ver\030"
  "\002 \001(\r\022\022\n\nuint32_seq\030\003 \001(\r\022\022\n\nuint32_cmd\030"
  "\004 \001(\r\022\026\n\016uint32_crop_id\030\005 \001(\r\022\023\n\013str_use"
  "r_id\030\006 \001(\t\022\031\n\021uint64_meeting_id\030\007 \001(\004\022!\n"
  "\031bytes_media_gateway_token\030\010 \001(\014\022\032\n\021uint"
  "32_error_code\030\311\001 \001(\r\022\031\n\020str_error_string"
  "\030\312\001 \001(\t*\005\010e\020\311\001\"\230\003\n\023MediaGatewayBodyReq\022U"
  "\n\032msg_join_meeting_media_req\030\001 \001(\01321.ten"
  "cent.media_gateway.access.JoinMeetingMed"
  "iaReq\022=\n\rmsg_hello_req\030\002 \001(\0132&.tencent.m"
  "edia_gateway.access.HelloReq\0229\n\013msg_sdp_"
  "req\030\003 \001(\0132$.tencent.media_gateway.access"
  ".SdpReq\022W\n\033msg_s2c_media_broadcast_req\030\004"
  " \001(\01322.tencent.media_gateway.access.S2CM"
  "ediaBroadcastReq\022W\n\033msg_get_media_broadc"
  "ast_req\030\005 \001(\01322.tencent.media_gateway.ac"
  "cess.GetMediaBroadcastReq\"\230\003\n\023MediaGatew"
  "ayBodyRes\022U\n\032msg_join_meeting_media_res\030"
  "\001 \001(\01321.tencent.media_gateway.access.Joi"
  "nMeetingMediaRes\022=\n\rmsg_hello_res\030\002 \001(\0132"
  "&.tencent.media_gateway.access.HelloRes\022"
  "9\n\013msg_sdp_res\030\003 \001(\0132$.tencent.media_gat"
  "eway.access.SdpRes\022W\n\033msg_s2c_media_broa"
  "dcast_res\030\004 \001(\01322.tencent.media_gateway."
  "access.S2CMediaBroadcastRes\022W\n\033msg_get_m"
  "edia_broadcast_res\030\005 \001(\01322.tencent.media"
  "_gateway.access.GetMediaBroadcastRes\"\235\002\n"
  "\023JoinMeetingMediaReq\022\025\n\rstr_os_verion\030\001 "
  "\001(\t\022\027\n\017str_device_name\030\002 \001(\t\022\027\n\017str_scre"
  "en_name\030\013 \001(\t\022\033\n\023uint32_screen_width\030\014 \001"
  "(\r\022\034\n\024uint32_screen_height\030\r \001(\r\022\027\n\017str_"
  "camera_name\030\025 \001(\t\022\033\n\023uint32_camera_width"
  "\030\026 \001(\r\022\034\n\024uint32_camera_height\030\027 \001(\r\022\030\n\020"
  "str_speaker_name\030\037 \001(\t\022\024\n\014str_mic_name\030)"
  " \001(\t\"\025\n\023JoinMeetingMediaRes\"\n\n\010HelloReq\""
  "Y\n\010HelloRes\022\030\n\020uint32_client_ip\030\001 \001(\r\022\032\n"
  "\022uint32_client_port\030\002 \001(\r\022\027\n\017uint32_inte"
  "rval\030\003 \001(\r\"\037\n\006SdpReq\022\025\n\rstr_sdp_offer\030\001 "
  "\001(\t\" \n\006SdpRes\022\026\n\016str_sdp_answer\030\001 \001(\t\"\'\n"
  "\024S2CMediaBroadcastReq\022\017\n\007str_sdp\030\001 \001(\t\"\026"
  "\n\024S2CMediaBroadcastRes\"\026\n\024GetMediaBroadc"
  "astReq\"\'\n\024GetMediaBroadcastRes\022\017\n\007str_sd"
  "p\030\001 \001(\t*\326\002\n\025C2S_MEDIA_GATAWAY_CMD\022\017\n\013CMD"
  "_UNKNOWN\020\000\022\"\n\036CMD_C2S_JOIN_MEETING_MEDIA"
  "_REQ\020\001\022\"\n\036CMD_C2S_JOIN_MEETING_MEDIA_RES"
  "\020\002\022\025\n\021CMD_C2S_HELLO_REQ\020\003\022\025\n\021CMD_C2S_HEL"
  "LO_RES\020\004\022\023\n\017CMD_C2S_SDP_REQ\020\005\022\023\n\017CMD_C2S"
  "_SDP_RES\020\006\022#\n\037CMD_C2S_GET_MEDIA_BROADCAS"
  "T_REQ\020\007\022#\n\037CMD_C2S_GET_MEDIA_BROADCAST_R"
  "ES\020\010\022 \n\033CMD_S2C_MEDIA_BROADCAST_REQ\020\201 \022 "
  "\n\033CMD_S2C_MEDIA_BROADCAST_RES\020\202 B\034\n\020com."
  "bcq.protobufB\010MideaCmd"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_media_5fgateway_5faccess_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_media_5fgateway_5faccess_2eproto_sccs[13] = {
  &scc_info_GetMediaBroadcastReq_media_5fgateway_5faccess_2eproto.base,
  &scc_info_GetMediaBroadcastRes_media_5fgateway_5faccess_2eproto.base,
  &scc_info_HelloReq_media_5fgateway_5faccess_2eproto.base,
  &scc_info_HelloRes_media_5fgateway_5faccess_2eproto.base,
  &scc_info_JoinMeetingMediaReq_media_5fgateway_5faccess_2eproto.base,
  &scc_info_JoinMeetingMediaRes_media_5fgateway_5faccess_2eproto.base,
  &scc_info_MediaGatewayBodyReq_media_5fgateway_5faccess_2eproto.base,
  &scc_info_MediaGatewayBodyRes_media_5fgateway_5faccess_2eproto.base,
  &scc_info_MediaGatewayHead_media_5fgateway_5faccess_2eproto.base,
  &scc_info_S2CMediaBroadcastReq_media_5fgateway_5faccess_2eproto.base,
  &scc_info_S2CMediaBroadcastRes_media_5fgateway_5faccess_2eproto.base,
  &scc_info_SdpReq_media_5fgateway_5faccess_2eproto.base,
  &scc_info_SdpRes_media_5fgateway_5faccess_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_media_5fgateway_5faccess_2eproto_once;
static bool descriptor_table_media_5fgateway_5faccess_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_media_5fgateway_5faccess_2eproto = {
  &descriptor_table_media_5fgateway_5faccess_2eproto_initialized, descriptor_table_protodef_media_5fgateway_5faccess_2eproto, "media_gateway_access.proto", 2142,
  &descriptor_table_media_5fgateway_5faccess_2eproto_once, descriptor_table_media_5fgateway_5faccess_2eproto_sccs, descriptor_table_media_5fgateway_5faccess_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_media_5fgateway_5faccess_2eproto::offsets,
  file_level_metadata_media_5fgateway_5faccess_2eproto, 13, file_level_enum_descriptors_media_5fgateway_5faccess_2eproto, file_level_service_descriptors_media_5fgateway_5faccess_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_media_5fgateway_5faccess_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_media_5fgateway_5faccess_2eproto), true);
namespace tencent {
namespace media_gateway {
namespace access {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* C2S_MEDIA_GATAWAY_CMD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_media_5fgateway_5faccess_2eproto);
  return file_level_enum_descriptors_media_5fgateway_5faccess_2eproto[0];
}
bool C2S_MEDIA_GATAWAY_CMD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 4097:
    case 4098:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MediaGatewayHead::InitAsDefaultInstance() {
}
class MediaGatewayHead::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaGatewayHead>()._has_bits_);
  static void set_has_uint32_sdkid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uint32_sdk_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uint32_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_uint32_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_uint32_crop_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_str_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uint64_meeting_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bytes_media_gateway_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uint32_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_str_error_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MediaGatewayHead::MediaGatewayHead()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.MediaGatewayHead)
}
MediaGatewayHead::MediaGatewayHead(const MediaGatewayHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  str_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_user_id()) {
    str_user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_user_id_);
  }
  bytes_media_gateway_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bytes_media_gateway_token()) {
    bytes_media_gateway_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bytes_media_gateway_token_);
  }
  str_error_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_error_string()) {
    str_error_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_error_string_);
  }
  ::memcpy(&uint32_sdkid_, &from.uint32_sdkid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uint32_error_code_) -
    reinterpret_cast<char*>(&uint32_sdkid_)) + sizeof(uint32_error_code_));
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.MediaGatewayHead)
}

void MediaGatewayHead::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MediaGatewayHead_media_5fgateway_5faccess_2eproto.base);
  str_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_media_gateway_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_error_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uint32_sdkid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uint32_error_code_) -
      reinterpret_cast<char*>(&uint32_sdkid_)) + sizeof(uint32_error_code_));
}

MediaGatewayHead::~MediaGatewayHead() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.MediaGatewayHead)
  SharedDtor();
}

void MediaGatewayHead::SharedDtor() {
  str_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_media_gateway_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_error_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MediaGatewayHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaGatewayHead& MediaGatewayHead::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaGatewayHead_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void MediaGatewayHead::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.MediaGatewayHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      str_user_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_media_gateway_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      str_error_string_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&uint32_sdkid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uint64_meeting_id_) -
        reinterpret_cast<char*>(&uint32_sdkid_)) + sizeof(uint64_meeting_id_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&uint32_crop_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uint32_error_code_) -
        reinterpret_cast<char*>(&uint32_crop_id_)) + sizeof(uint32_error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MediaGatewayHead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 uint32_sdkid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uint32_sdkid(&has_bits);
          uint32_sdkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_sdk_ver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uint32_sdk_ver(&has_bits);
          uint32_sdk_ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uint32_seq(&has_bits);
          uint32_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uint32_cmd(&has_bits);
          uint32_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_crop_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_uint32_crop_id(&has_bits);
          uint32_crop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string str_user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_str_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencent.media_gateway.access.MediaGatewayHead.str_user_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 uint64_meeting_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_uint64_meeting_id(&has_bits);
          uint64_meeting_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bytes_media_gateway_token = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_bytes_media_gateway_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_error_code = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_uint32_error_code(&has_bits);
          uint32_error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string str_error_string = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_str_error_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencent.media_gateway.access.MediaGatewayHead.str_error_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((808u <= tag && tag < 1608u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaGatewayHead::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.MediaGatewayHead)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 uint32_sdkid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uint32_sdkid(), target);
  }

  // optional uint32 uint32_sdk_ver = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uint32_sdk_ver(), target);
  }

  // optional uint32 uint32_seq = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uint32_seq(), target);
  }

  // optional uint32 uint32_cmd = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uint32_cmd(), target);
  }

  // optional uint32 uint32_crop_id = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uint32_crop_id(), target);
  }

  // optional string str_user_id = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_user_id().data(), static_cast<int>(this->_internal_str_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tencent.media_gateway.access.MediaGatewayHead.str_user_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_str_user_id(), target);
  }

  // optional uint64 uint64_meeting_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_uint64_meeting_id(), target);
  }

  // optional bytes bytes_media_gateway_token = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_bytes_media_gateway_token(), target);
  }

  // Extension range [101, 201)
  target = _extensions_._InternalSerialize(
      101, 201, target, stream);

  // optional uint32 uint32_error_code = 201;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(201, this->_internal_uint32_error_code(), target);
  }

  // optional string str_error_string = 202;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_error_string().data(), static_cast<int>(this->_internal_str_error_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tencent.media_gateway.access.MediaGatewayHead.str_error_string");
    target = stream->WriteStringMaybeAliased(
        202, this->_internal_str_error_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.MediaGatewayHead)
  return target;
}

size_t MediaGatewayHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.MediaGatewayHead)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string str_user_id = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_user_id());
    }

    // optional bytes bytes_media_gateway_token = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_media_gateway_token());
    }

    // optional string str_error_string = 202;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_error_string());
    }

    // optional uint32 uint32_sdkid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_sdkid());
    }

    // optional uint32 uint32_sdk_ver = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_sdk_ver());
    }

    // optional uint32 uint32_seq = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_seq());
    }

    // optional uint32 uint32_cmd = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_cmd());
    }

    // optional uint64 uint64_meeting_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64_meeting_id());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 uint32_crop_id = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_crop_id());
    }

    // optional uint32 uint32_error_code = 201;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_error_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaGatewayHead::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.MediaGatewayHead)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaGatewayHead* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaGatewayHead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.MediaGatewayHead)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.MediaGatewayHead)
    MergeFrom(*source);
  }
}

void MediaGatewayHead::MergeFrom(const MediaGatewayHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.MediaGatewayHead)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      str_user_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_user_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      bytes_media_gateway_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bytes_media_gateway_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      str_error_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_error_string_);
    }
    if (cached_has_bits & 0x00000008u) {
      uint32_sdkid_ = from.uint32_sdkid_;
    }
    if (cached_has_bits & 0x00000010u) {
      uint32_sdk_ver_ = from.uint32_sdk_ver_;
    }
    if (cached_has_bits & 0x00000020u) {
      uint32_seq_ = from.uint32_seq_;
    }
    if (cached_has_bits & 0x00000040u) {
      uint32_cmd_ = from.uint32_cmd_;
    }
    if (cached_has_bits & 0x00000080u) {
      uint64_meeting_id_ = from.uint64_meeting_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      uint32_crop_id_ = from.uint32_crop_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      uint32_error_code_ = from.uint32_error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MediaGatewayHead::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.MediaGatewayHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaGatewayHead::CopyFrom(const MediaGatewayHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.MediaGatewayHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaGatewayHead::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void MediaGatewayHead::InternalSwap(MediaGatewayHead* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  str_user_id_.Swap(&other->str_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bytes_media_gateway_token_.Swap(&other->bytes_media_gateway_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str_error_string_.Swap(&other->str_error_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uint32_sdkid_, other->uint32_sdkid_);
  swap(uint32_sdk_ver_, other->uint32_sdk_ver_);
  swap(uint32_seq_, other->uint32_seq_);
  swap(uint32_cmd_, other->uint32_cmd_);
  swap(uint64_meeting_id_, other->uint64_meeting_id_);
  swap(uint32_crop_id_, other->uint32_crop_id_);
  swap(uint32_error_code_, other->uint32_error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaGatewayHead::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MediaGatewayBodyReq::InitAsDefaultInstance() {
  ::tencent::media_gateway::access::_MediaGatewayBodyReq_default_instance_._instance.get_mutable()->msg_join_meeting_media_req_ = const_cast< ::tencent::media_gateway::access::JoinMeetingMediaReq*>(
      ::tencent::media_gateway::access::JoinMeetingMediaReq::internal_default_instance());
  ::tencent::media_gateway::access::_MediaGatewayBodyReq_default_instance_._instance.get_mutable()->msg_hello_req_ = const_cast< ::tencent::media_gateway::access::HelloReq*>(
      ::tencent::media_gateway::access::HelloReq::internal_default_instance());
  ::tencent::media_gateway::access::_MediaGatewayBodyReq_default_instance_._instance.get_mutable()->msg_sdp_req_ = const_cast< ::tencent::media_gateway::access::SdpReq*>(
      ::tencent::media_gateway::access::SdpReq::internal_default_instance());
  ::tencent::media_gateway::access::_MediaGatewayBodyReq_default_instance_._instance.get_mutable()->msg_s2c_media_broadcast_req_ = const_cast< ::tencent::media_gateway::access::S2CMediaBroadcastReq*>(
      ::tencent::media_gateway::access::S2CMediaBroadcastReq::internal_default_instance());
  ::tencent::media_gateway::access::_MediaGatewayBodyReq_default_instance_._instance.get_mutable()->msg_get_media_broadcast_req_ = const_cast< ::tencent::media_gateway::access::GetMediaBroadcastReq*>(
      ::tencent::media_gateway::access::GetMediaBroadcastReq::internal_default_instance());
}
class MediaGatewayBodyReq::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaGatewayBodyReq>()._has_bits_);
  static const ::tencent::media_gateway::access::JoinMeetingMediaReq& msg_join_meeting_media_req(const MediaGatewayBodyReq* msg);
  static void set_has_msg_join_meeting_media_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tencent::media_gateway::access::HelloReq& msg_hello_req(const MediaGatewayBodyReq* msg);
  static void set_has_msg_hello_req(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tencent::media_gateway::access::SdpReq& msg_sdp_req(const MediaGatewayBodyReq* msg);
  static void set_has_msg_sdp_req(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tencent::media_gateway::access::S2CMediaBroadcastReq& msg_s2c_media_broadcast_req(const MediaGatewayBodyReq* msg);
  static void set_has_msg_s2c_media_broadcast_req(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tencent::media_gateway::access::GetMediaBroadcastReq& msg_get_media_broadcast_req(const MediaGatewayBodyReq* msg);
  static void set_has_msg_get_media_broadcast_req(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::tencent::media_gateway::access::JoinMeetingMediaReq&
MediaGatewayBodyReq::_Internal::msg_join_meeting_media_req(const MediaGatewayBodyReq* msg) {
  return *msg->msg_join_meeting_media_req_;
}
const ::tencent::media_gateway::access::HelloReq&
MediaGatewayBodyReq::_Internal::msg_hello_req(const MediaGatewayBodyReq* msg) {
  return *msg->msg_hello_req_;
}
const ::tencent::media_gateway::access::SdpReq&
MediaGatewayBodyReq::_Internal::msg_sdp_req(const MediaGatewayBodyReq* msg) {
  return *msg->msg_sdp_req_;
}
const ::tencent::media_gateway::access::S2CMediaBroadcastReq&
MediaGatewayBodyReq::_Internal::msg_s2c_media_broadcast_req(const MediaGatewayBodyReq* msg) {
  return *msg->msg_s2c_media_broadcast_req_;
}
const ::tencent::media_gateway::access::GetMediaBroadcastReq&
MediaGatewayBodyReq::_Internal::msg_get_media_broadcast_req(const MediaGatewayBodyReq* msg) {
  return *msg->msg_get_media_broadcast_req_;
}
MediaGatewayBodyReq::MediaGatewayBodyReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.MediaGatewayBodyReq)
}
MediaGatewayBodyReq::MediaGatewayBodyReq(const MediaGatewayBodyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_join_meeting_media_req()) {
    msg_join_meeting_media_req_ = new ::tencent::media_gateway::access::JoinMeetingMediaReq(*from.msg_join_meeting_media_req_);
  } else {
    msg_join_meeting_media_req_ = nullptr;
  }
  if (from._internal_has_msg_hello_req()) {
    msg_hello_req_ = new ::tencent::media_gateway::access::HelloReq(*from.msg_hello_req_);
  } else {
    msg_hello_req_ = nullptr;
  }
  if (from._internal_has_msg_sdp_req()) {
    msg_sdp_req_ = new ::tencent::media_gateway::access::SdpReq(*from.msg_sdp_req_);
  } else {
    msg_sdp_req_ = nullptr;
  }
  if (from._internal_has_msg_s2c_media_broadcast_req()) {
    msg_s2c_media_broadcast_req_ = new ::tencent::media_gateway::access::S2CMediaBroadcastReq(*from.msg_s2c_media_broadcast_req_);
  } else {
    msg_s2c_media_broadcast_req_ = nullptr;
  }
  if (from._internal_has_msg_get_media_broadcast_req()) {
    msg_get_media_broadcast_req_ = new ::tencent::media_gateway::access::GetMediaBroadcastReq(*from.msg_get_media_broadcast_req_);
  } else {
    msg_get_media_broadcast_req_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.MediaGatewayBodyReq)
}

void MediaGatewayBodyReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MediaGatewayBodyReq_media_5fgateway_5faccess_2eproto.base);
  ::memset(&msg_join_meeting_media_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_get_media_broadcast_req_) -
      reinterpret_cast<char*>(&msg_join_meeting_media_req_)) + sizeof(msg_get_media_broadcast_req_));
}

MediaGatewayBodyReq::~MediaGatewayBodyReq() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.MediaGatewayBodyReq)
  SharedDtor();
}

void MediaGatewayBodyReq::SharedDtor() {
  if (this != internal_default_instance()) delete msg_join_meeting_media_req_;
  if (this != internal_default_instance()) delete msg_hello_req_;
  if (this != internal_default_instance()) delete msg_sdp_req_;
  if (this != internal_default_instance()) delete msg_s2c_media_broadcast_req_;
  if (this != internal_default_instance()) delete msg_get_media_broadcast_req_;
}

void MediaGatewayBodyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaGatewayBodyReq& MediaGatewayBodyReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaGatewayBodyReq_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void MediaGatewayBodyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.MediaGatewayBodyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(msg_join_meeting_media_req_ != nullptr);
      msg_join_meeting_media_req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(msg_hello_req_ != nullptr);
      msg_hello_req_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(msg_sdp_req_ != nullptr);
      msg_sdp_req_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(msg_s2c_media_broadcast_req_ != nullptr);
      msg_s2c_media_broadcast_req_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(msg_get_media_broadcast_req_ != nullptr);
      msg_get_media_broadcast_req_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MediaGatewayBodyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .tencent.media_gateway.access.JoinMeetingMediaReq msg_join_meeting_media_req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_join_meeting_media_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tencent.media_gateway.access.HelloReq msg_hello_req = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_hello_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tencent.media_gateway.access.SdpReq msg_sdp_req = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_sdp_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tencent.media_gateway.access.S2CMediaBroadcastReq msg_s2c_media_broadcast_req = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_s2c_media_broadcast_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tencent.media_gateway.access.GetMediaBroadcastReq msg_get_media_broadcast_req = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_get_media_broadcast_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaGatewayBodyReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.MediaGatewayBodyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tencent.media_gateway.access.JoinMeetingMediaReq msg_join_meeting_media_req = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_join_meeting_media_req(this), target, stream);
  }

  // optional .tencent.media_gateway.access.HelloReq msg_hello_req = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_hello_req(this), target, stream);
  }

  // optional .tencent.media_gateway.access.SdpReq msg_sdp_req = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::msg_sdp_req(this), target, stream);
  }

  // optional .tencent.media_gateway.access.S2CMediaBroadcastReq msg_s2c_media_broadcast_req = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::msg_s2c_media_broadcast_req(this), target, stream);
  }

  // optional .tencent.media_gateway.access.GetMediaBroadcastReq msg_get_media_broadcast_req = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::msg_get_media_broadcast_req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.MediaGatewayBodyReq)
  return target;
}

size_t MediaGatewayBodyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.MediaGatewayBodyReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .tencent.media_gateway.access.JoinMeetingMediaReq msg_join_meeting_media_req = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_join_meeting_media_req_);
    }

    // optional .tencent.media_gateway.access.HelloReq msg_hello_req = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_hello_req_);
    }

    // optional .tencent.media_gateway.access.SdpReq msg_sdp_req = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_sdp_req_);
    }

    // optional .tencent.media_gateway.access.S2CMediaBroadcastReq msg_s2c_media_broadcast_req = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_s2c_media_broadcast_req_);
    }

    // optional .tencent.media_gateway.access.GetMediaBroadcastReq msg_get_media_broadcast_req = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_get_media_broadcast_req_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaGatewayBodyReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.MediaGatewayBodyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaGatewayBodyReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaGatewayBodyReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.MediaGatewayBodyReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.MediaGatewayBodyReq)
    MergeFrom(*source);
  }
}

void MediaGatewayBodyReq::MergeFrom(const MediaGatewayBodyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.MediaGatewayBodyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_msg_join_meeting_media_req()->::tencent::media_gateway::access::JoinMeetingMediaReq::MergeFrom(from._internal_msg_join_meeting_media_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_msg_hello_req()->::tencent::media_gateway::access::HelloReq::MergeFrom(from._internal_msg_hello_req());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_msg_sdp_req()->::tencent::media_gateway::access::SdpReq::MergeFrom(from._internal_msg_sdp_req());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_msg_s2c_media_broadcast_req()->::tencent::media_gateway::access::S2CMediaBroadcastReq::MergeFrom(from._internal_msg_s2c_media_broadcast_req());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_msg_get_media_broadcast_req()->::tencent::media_gateway::access::GetMediaBroadcastReq::MergeFrom(from._internal_msg_get_media_broadcast_req());
    }
  }
}

void MediaGatewayBodyReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.MediaGatewayBodyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaGatewayBodyReq::CopyFrom(const MediaGatewayBodyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.MediaGatewayBodyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaGatewayBodyReq::IsInitialized() const {
  return true;
}

void MediaGatewayBodyReq::InternalSwap(MediaGatewayBodyReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(msg_join_meeting_media_req_, other->msg_join_meeting_media_req_);
  swap(msg_hello_req_, other->msg_hello_req_);
  swap(msg_sdp_req_, other->msg_sdp_req_);
  swap(msg_s2c_media_broadcast_req_, other->msg_s2c_media_broadcast_req_);
  swap(msg_get_media_broadcast_req_, other->msg_get_media_broadcast_req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaGatewayBodyReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MediaGatewayBodyRes::InitAsDefaultInstance() {
  ::tencent::media_gateway::access::_MediaGatewayBodyRes_default_instance_._instance.get_mutable()->msg_join_meeting_media_res_ = const_cast< ::tencent::media_gateway::access::JoinMeetingMediaRes*>(
      ::tencent::media_gateway::access::JoinMeetingMediaRes::internal_default_instance());
  ::tencent::media_gateway::access::_MediaGatewayBodyRes_default_instance_._instance.get_mutable()->msg_hello_res_ = const_cast< ::tencent::media_gateway::access::HelloRes*>(
      ::tencent::media_gateway::access::HelloRes::internal_default_instance());
  ::tencent::media_gateway::access::_MediaGatewayBodyRes_default_instance_._instance.get_mutable()->msg_sdp_res_ = const_cast< ::tencent::media_gateway::access::SdpRes*>(
      ::tencent::media_gateway::access::SdpRes::internal_default_instance());
  ::tencent::media_gateway::access::_MediaGatewayBodyRes_default_instance_._instance.get_mutable()->msg_s2c_media_broadcast_res_ = const_cast< ::tencent::media_gateway::access::S2CMediaBroadcastRes*>(
      ::tencent::media_gateway::access::S2CMediaBroadcastRes::internal_default_instance());
  ::tencent::media_gateway::access::_MediaGatewayBodyRes_default_instance_._instance.get_mutable()->msg_get_media_broadcast_res_ = const_cast< ::tencent::media_gateway::access::GetMediaBroadcastRes*>(
      ::tencent::media_gateway::access::GetMediaBroadcastRes::internal_default_instance());
}
class MediaGatewayBodyRes::_Internal {
 public:
  using HasBits = decltype(std::declval<MediaGatewayBodyRes>()._has_bits_);
  static const ::tencent::media_gateway::access::JoinMeetingMediaRes& msg_join_meeting_media_res(const MediaGatewayBodyRes* msg);
  static void set_has_msg_join_meeting_media_res(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tencent::media_gateway::access::HelloRes& msg_hello_res(const MediaGatewayBodyRes* msg);
  static void set_has_msg_hello_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tencent::media_gateway::access::SdpRes& msg_sdp_res(const MediaGatewayBodyRes* msg);
  static void set_has_msg_sdp_res(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tencent::media_gateway::access::S2CMediaBroadcastRes& msg_s2c_media_broadcast_res(const MediaGatewayBodyRes* msg);
  static void set_has_msg_s2c_media_broadcast_res(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tencent::media_gateway::access::GetMediaBroadcastRes& msg_get_media_broadcast_res(const MediaGatewayBodyRes* msg);
  static void set_has_msg_get_media_broadcast_res(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::tencent::media_gateway::access::JoinMeetingMediaRes&
MediaGatewayBodyRes::_Internal::msg_join_meeting_media_res(const MediaGatewayBodyRes* msg) {
  return *msg->msg_join_meeting_media_res_;
}
const ::tencent::media_gateway::access::HelloRes&
MediaGatewayBodyRes::_Internal::msg_hello_res(const MediaGatewayBodyRes* msg) {
  return *msg->msg_hello_res_;
}
const ::tencent::media_gateway::access::SdpRes&
MediaGatewayBodyRes::_Internal::msg_sdp_res(const MediaGatewayBodyRes* msg) {
  return *msg->msg_sdp_res_;
}
const ::tencent::media_gateway::access::S2CMediaBroadcastRes&
MediaGatewayBodyRes::_Internal::msg_s2c_media_broadcast_res(const MediaGatewayBodyRes* msg) {
  return *msg->msg_s2c_media_broadcast_res_;
}
const ::tencent::media_gateway::access::GetMediaBroadcastRes&
MediaGatewayBodyRes::_Internal::msg_get_media_broadcast_res(const MediaGatewayBodyRes* msg) {
  return *msg->msg_get_media_broadcast_res_;
}
MediaGatewayBodyRes::MediaGatewayBodyRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.MediaGatewayBodyRes)
}
MediaGatewayBodyRes::MediaGatewayBodyRes(const MediaGatewayBodyRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_join_meeting_media_res()) {
    msg_join_meeting_media_res_ = new ::tencent::media_gateway::access::JoinMeetingMediaRes(*from.msg_join_meeting_media_res_);
  } else {
    msg_join_meeting_media_res_ = nullptr;
  }
  if (from._internal_has_msg_hello_res()) {
    msg_hello_res_ = new ::tencent::media_gateway::access::HelloRes(*from.msg_hello_res_);
  } else {
    msg_hello_res_ = nullptr;
  }
  if (from._internal_has_msg_sdp_res()) {
    msg_sdp_res_ = new ::tencent::media_gateway::access::SdpRes(*from.msg_sdp_res_);
  } else {
    msg_sdp_res_ = nullptr;
  }
  if (from._internal_has_msg_s2c_media_broadcast_res()) {
    msg_s2c_media_broadcast_res_ = new ::tencent::media_gateway::access::S2CMediaBroadcastRes(*from.msg_s2c_media_broadcast_res_);
  } else {
    msg_s2c_media_broadcast_res_ = nullptr;
  }
  if (from._internal_has_msg_get_media_broadcast_res()) {
    msg_get_media_broadcast_res_ = new ::tencent::media_gateway::access::GetMediaBroadcastRes(*from.msg_get_media_broadcast_res_);
  } else {
    msg_get_media_broadcast_res_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.MediaGatewayBodyRes)
}

void MediaGatewayBodyRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MediaGatewayBodyRes_media_5fgateway_5faccess_2eproto.base);
  ::memset(&msg_join_meeting_media_res_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_get_media_broadcast_res_) -
      reinterpret_cast<char*>(&msg_join_meeting_media_res_)) + sizeof(msg_get_media_broadcast_res_));
}

MediaGatewayBodyRes::~MediaGatewayBodyRes() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.MediaGatewayBodyRes)
  SharedDtor();
}

void MediaGatewayBodyRes::SharedDtor() {
  if (this != internal_default_instance()) delete msg_join_meeting_media_res_;
  if (this != internal_default_instance()) delete msg_hello_res_;
  if (this != internal_default_instance()) delete msg_sdp_res_;
  if (this != internal_default_instance()) delete msg_s2c_media_broadcast_res_;
  if (this != internal_default_instance()) delete msg_get_media_broadcast_res_;
}

void MediaGatewayBodyRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaGatewayBodyRes& MediaGatewayBodyRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaGatewayBodyRes_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void MediaGatewayBodyRes::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.MediaGatewayBodyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(msg_join_meeting_media_res_ != nullptr);
      msg_join_meeting_media_res_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(msg_hello_res_ != nullptr);
      msg_hello_res_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(msg_sdp_res_ != nullptr);
      msg_sdp_res_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(msg_s2c_media_broadcast_res_ != nullptr);
      msg_s2c_media_broadcast_res_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(msg_get_media_broadcast_res_ != nullptr);
      msg_get_media_broadcast_res_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MediaGatewayBodyRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .tencent.media_gateway.access.JoinMeetingMediaRes msg_join_meeting_media_res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_join_meeting_media_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tencent.media_gateway.access.HelloRes msg_hello_res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_hello_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tencent.media_gateway.access.SdpRes msg_sdp_res = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_sdp_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tencent.media_gateway.access.S2CMediaBroadcastRes msg_s2c_media_broadcast_res = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_s2c_media_broadcast_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tencent.media_gateway.access.GetMediaBroadcastRes msg_get_media_broadcast_res = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_get_media_broadcast_res(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaGatewayBodyRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.MediaGatewayBodyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tencent.media_gateway.access.JoinMeetingMediaRes msg_join_meeting_media_res = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_join_meeting_media_res(this), target, stream);
  }

  // optional .tencent.media_gateway.access.HelloRes msg_hello_res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_hello_res(this), target, stream);
  }

  // optional .tencent.media_gateway.access.SdpRes msg_sdp_res = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::msg_sdp_res(this), target, stream);
  }

  // optional .tencent.media_gateway.access.S2CMediaBroadcastRes msg_s2c_media_broadcast_res = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::msg_s2c_media_broadcast_res(this), target, stream);
  }

  // optional .tencent.media_gateway.access.GetMediaBroadcastRes msg_get_media_broadcast_res = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::msg_get_media_broadcast_res(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.MediaGatewayBodyRes)
  return target;
}

size_t MediaGatewayBodyRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.MediaGatewayBodyRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .tencent.media_gateway.access.JoinMeetingMediaRes msg_join_meeting_media_res = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_join_meeting_media_res_);
    }

    // optional .tencent.media_gateway.access.HelloRes msg_hello_res = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_hello_res_);
    }

    // optional .tencent.media_gateway.access.SdpRes msg_sdp_res = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_sdp_res_);
    }

    // optional .tencent.media_gateway.access.S2CMediaBroadcastRes msg_s2c_media_broadcast_res = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_s2c_media_broadcast_res_);
    }

    // optional .tencent.media_gateway.access.GetMediaBroadcastRes msg_get_media_broadcast_res = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_get_media_broadcast_res_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaGatewayBodyRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.MediaGatewayBodyRes)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaGatewayBodyRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaGatewayBodyRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.MediaGatewayBodyRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.MediaGatewayBodyRes)
    MergeFrom(*source);
  }
}

void MediaGatewayBodyRes::MergeFrom(const MediaGatewayBodyRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.MediaGatewayBodyRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_msg_join_meeting_media_res()->::tencent::media_gateway::access::JoinMeetingMediaRes::MergeFrom(from._internal_msg_join_meeting_media_res());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_msg_hello_res()->::tencent::media_gateway::access::HelloRes::MergeFrom(from._internal_msg_hello_res());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_msg_sdp_res()->::tencent::media_gateway::access::SdpRes::MergeFrom(from._internal_msg_sdp_res());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_msg_s2c_media_broadcast_res()->::tencent::media_gateway::access::S2CMediaBroadcastRes::MergeFrom(from._internal_msg_s2c_media_broadcast_res());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_msg_get_media_broadcast_res()->::tencent::media_gateway::access::GetMediaBroadcastRes::MergeFrom(from._internal_msg_get_media_broadcast_res());
    }
  }
}

void MediaGatewayBodyRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.MediaGatewayBodyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaGatewayBodyRes::CopyFrom(const MediaGatewayBodyRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.MediaGatewayBodyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaGatewayBodyRes::IsInitialized() const {
  return true;
}

void MediaGatewayBodyRes::InternalSwap(MediaGatewayBodyRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(msg_join_meeting_media_res_, other->msg_join_meeting_media_res_);
  swap(msg_hello_res_, other->msg_hello_res_);
  swap(msg_sdp_res_, other->msg_sdp_res_);
  swap(msg_s2c_media_broadcast_res_, other->msg_s2c_media_broadcast_res_);
  swap(msg_get_media_broadcast_res_, other->msg_get_media_broadcast_res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaGatewayBodyRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinMeetingMediaReq::InitAsDefaultInstance() {
}
class JoinMeetingMediaReq::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinMeetingMediaReq>()._has_bits_);
  static void set_has_str_os_verion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_str_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_str_screen_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uint32_screen_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_uint32_screen_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_str_camera_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uint32_camera_width(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_uint32_camera_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_str_speaker_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_str_mic_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

JoinMeetingMediaReq::JoinMeetingMediaReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.JoinMeetingMediaReq)
}
JoinMeetingMediaReq::JoinMeetingMediaReq(const JoinMeetingMediaReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_os_verion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_os_verion()) {
    str_os_verion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_os_verion_);
  }
  str_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_device_name()) {
    str_device_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_device_name_);
  }
  str_screen_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_screen_name()) {
    str_screen_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_screen_name_);
  }
  str_camera_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_camera_name()) {
    str_camera_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_camera_name_);
  }
  str_speaker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_speaker_name()) {
    str_speaker_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_speaker_name_);
  }
  str_mic_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_mic_name()) {
    str_mic_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_mic_name_);
  }
  ::memcpy(&uint32_screen_width_, &from.uint32_screen_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&uint32_camera_height_) -
    reinterpret_cast<char*>(&uint32_screen_width_)) + sizeof(uint32_camera_height_));
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.JoinMeetingMediaReq)
}

void JoinMeetingMediaReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinMeetingMediaReq_media_5fgateway_5faccess_2eproto.base);
  str_os_verion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_screen_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_camera_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_speaker_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_mic_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uint32_screen_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uint32_camera_height_) -
      reinterpret_cast<char*>(&uint32_screen_width_)) + sizeof(uint32_camera_height_));
}

JoinMeetingMediaReq::~JoinMeetingMediaReq() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.JoinMeetingMediaReq)
  SharedDtor();
}

void JoinMeetingMediaReq::SharedDtor() {
  str_os_verion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_screen_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_camera_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_speaker_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_mic_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinMeetingMediaReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinMeetingMediaReq& JoinMeetingMediaReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinMeetingMediaReq_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void JoinMeetingMediaReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.JoinMeetingMediaReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      str_os_verion_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      str_device_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      str_screen_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      str_camera_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      str_speaker_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      str_mic_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&uint32_screen_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uint32_screen_height_) -
        reinterpret_cast<char*>(&uint32_screen_width_)) + sizeof(uint32_screen_height_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&uint32_camera_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uint32_camera_height_) -
        reinterpret_cast<char*>(&uint32_camera_width_)) + sizeof(uint32_camera_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* JoinMeetingMediaReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string str_os_verion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_str_os_verion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencent.media_gateway.access.JoinMeetingMediaReq.str_os_verion");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string str_device_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_str_device_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencent.media_gateway.access.JoinMeetingMediaReq.str_device_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string str_screen_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_str_screen_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencent.media_gateway.access.JoinMeetingMediaReq.str_screen_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_screen_width = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_uint32_screen_width(&has_bits);
          uint32_screen_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_screen_height = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_uint32_screen_height(&has_bits);
          uint32_screen_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string str_camera_name = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_str_camera_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencent.media_gateway.access.JoinMeetingMediaReq.str_camera_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_camera_width = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_uint32_camera_width(&has_bits);
          uint32_camera_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_camera_height = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_uint32_camera_height(&has_bits);
          uint32_camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string str_speaker_name = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_str_speaker_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencent.media_gateway.access.JoinMeetingMediaReq.str_speaker_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string str_mic_name = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_str_mic_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencent.media_gateway.access.JoinMeetingMediaReq.str_mic_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinMeetingMediaReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.JoinMeetingMediaReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str_os_verion = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_os_verion().data(), static_cast<int>(this->_internal_str_os_verion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tencent.media_gateway.access.JoinMeetingMediaReq.str_os_verion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str_os_verion(), target);
  }

  // optional string str_device_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_device_name().data(), static_cast<int>(this->_internal_str_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tencent.media_gateway.access.JoinMeetingMediaReq.str_device_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str_device_name(), target);
  }

  // optional string str_screen_name = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_screen_name().data(), static_cast<int>(this->_internal_str_screen_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tencent.media_gateway.access.JoinMeetingMediaReq.str_screen_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_str_screen_name(), target);
  }

  // optional uint32 uint32_screen_width = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_uint32_screen_width(), target);
  }

  // optional uint32 uint32_screen_height = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_uint32_screen_height(), target);
  }

  // optional string str_camera_name = 21;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_camera_name().data(), static_cast<int>(this->_internal_str_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tencent.media_gateway.access.JoinMeetingMediaReq.str_camera_name");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_str_camera_name(), target);
  }

  // optional uint32 uint32_camera_width = 22;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_uint32_camera_width(), target);
  }

  // optional uint32 uint32_camera_height = 23;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_uint32_camera_height(), target);
  }

  // optional string str_speaker_name = 31;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_speaker_name().data(), static_cast<int>(this->_internal_str_speaker_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tencent.media_gateway.access.JoinMeetingMediaReq.str_speaker_name");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_str_speaker_name(), target);
  }

  // optional string str_mic_name = 41;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_mic_name().data(), static_cast<int>(this->_internal_str_mic_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tencent.media_gateway.access.JoinMeetingMediaReq.str_mic_name");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_str_mic_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.JoinMeetingMediaReq)
  return target;
}

size_t JoinMeetingMediaReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.JoinMeetingMediaReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string str_os_verion = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_os_verion());
    }

    // optional string str_device_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_device_name());
    }

    // optional string str_screen_name = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_screen_name());
    }

    // optional string str_camera_name = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_camera_name());
    }

    // optional string str_speaker_name = 31;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_speaker_name());
    }

    // optional string str_mic_name = 41;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_mic_name());
    }

    // optional uint32 uint32_screen_width = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_screen_width());
    }

    // optional uint32 uint32_screen_height = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_screen_height());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 uint32_camera_width = 22;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_camera_width());
    }

    // optional uint32 uint32_camera_height = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_camera_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinMeetingMediaReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.JoinMeetingMediaReq)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinMeetingMediaReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinMeetingMediaReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.JoinMeetingMediaReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.JoinMeetingMediaReq)
    MergeFrom(*source);
  }
}

void JoinMeetingMediaReq::MergeFrom(const JoinMeetingMediaReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.JoinMeetingMediaReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      str_os_verion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_os_verion_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      str_device_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_device_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      str_screen_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_screen_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      str_camera_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_camera_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      str_speaker_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_speaker_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      str_mic_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_mic_name_);
    }
    if (cached_has_bits & 0x00000040u) {
      uint32_screen_width_ = from.uint32_screen_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      uint32_screen_height_ = from.uint32_screen_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      uint32_camera_width_ = from.uint32_camera_width_;
    }
    if (cached_has_bits & 0x00000200u) {
      uint32_camera_height_ = from.uint32_camera_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinMeetingMediaReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.JoinMeetingMediaReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinMeetingMediaReq::CopyFrom(const JoinMeetingMediaReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.JoinMeetingMediaReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinMeetingMediaReq::IsInitialized() const {
  return true;
}

void JoinMeetingMediaReq::InternalSwap(JoinMeetingMediaReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  str_os_verion_.Swap(&other->str_os_verion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str_device_name_.Swap(&other->str_device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str_screen_name_.Swap(&other->str_screen_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str_camera_name_.Swap(&other->str_camera_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str_speaker_name_.Swap(&other->str_speaker_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  str_mic_name_.Swap(&other->str_mic_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uint32_screen_width_, other->uint32_screen_width_);
  swap(uint32_screen_height_, other->uint32_screen_height_);
  swap(uint32_camera_width_, other->uint32_camera_width_);
  swap(uint32_camera_height_, other->uint32_camera_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinMeetingMediaReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoinMeetingMediaRes::InitAsDefaultInstance() {
}
class JoinMeetingMediaRes::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinMeetingMediaRes>()._has_bits_);
};

JoinMeetingMediaRes::JoinMeetingMediaRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.JoinMeetingMediaRes)
}
JoinMeetingMediaRes::JoinMeetingMediaRes(const JoinMeetingMediaRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.JoinMeetingMediaRes)
}

void JoinMeetingMediaRes::SharedCtor() {
}

JoinMeetingMediaRes::~JoinMeetingMediaRes() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.JoinMeetingMediaRes)
  SharedDtor();
}

void JoinMeetingMediaRes::SharedDtor() {
}

void JoinMeetingMediaRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinMeetingMediaRes& JoinMeetingMediaRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinMeetingMediaRes_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void JoinMeetingMediaRes::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.JoinMeetingMediaRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* JoinMeetingMediaRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinMeetingMediaRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.JoinMeetingMediaRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.JoinMeetingMediaRes)
  return target;
}

size_t JoinMeetingMediaRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.JoinMeetingMediaRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinMeetingMediaRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.JoinMeetingMediaRes)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinMeetingMediaRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinMeetingMediaRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.JoinMeetingMediaRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.JoinMeetingMediaRes)
    MergeFrom(*source);
  }
}

void JoinMeetingMediaRes::MergeFrom(const JoinMeetingMediaRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.JoinMeetingMediaRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void JoinMeetingMediaRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.JoinMeetingMediaRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinMeetingMediaRes::CopyFrom(const JoinMeetingMediaRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.JoinMeetingMediaRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinMeetingMediaRes::IsInitialized() const {
  return true;
}

void JoinMeetingMediaRes::InternalSwap(JoinMeetingMediaRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinMeetingMediaRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HelloReq::InitAsDefaultInstance() {
}
class HelloReq::_Internal {
 public:
  using HasBits = decltype(std::declval<HelloReq>()._has_bits_);
};

HelloReq::HelloReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.HelloReq)
}
HelloReq::HelloReq(const HelloReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.HelloReq)
}

void HelloReq::SharedCtor() {
}

HelloReq::~HelloReq() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.HelloReq)
  SharedDtor();
}

void HelloReq::SharedDtor() {
}

void HelloReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloReq& HelloReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HelloReq_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void HelloReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.HelloReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HelloReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.HelloReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.HelloReq)
  return target;
}

size_t HelloReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.HelloReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.HelloReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HelloReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.HelloReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.HelloReq)
    MergeFrom(*source);
  }
}

void HelloReq::MergeFrom(const HelloReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.HelloReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HelloReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.HelloReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloReq::CopyFrom(const HelloReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.HelloReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReq::IsInitialized() const {
  return true;
}

void HelloReq::InternalSwap(HelloReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HelloRes::InitAsDefaultInstance() {
}
class HelloRes::_Internal {
 public:
  using HasBits = decltype(std::declval<HelloRes>()._has_bits_);
  static void set_has_uint32_client_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uint32_client_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uint32_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HelloRes::HelloRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.HelloRes)
}
HelloRes::HelloRes(const HelloRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uint32_client_ip_, &from.uint32_client_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&uint32_interval_) -
    reinterpret_cast<char*>(&uint32_client_ip_)) + sizeof(uint32_interval_));
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.HelloRes)
}

void HelloRes::SharedCtor() {
  ::memset(&uint32_client_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uint32_interval_) -
      reinterpret_cast<char*>(&uint32_client_ip_)) + sizeof(uint32_interval_));
}

HelloRes::~HelloRes() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.HelloRes)
  SharedDtor();
}

void HelloRes::SharedDtor() {
}

void HelloRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloRes& HelloRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HelloRes_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void HelloRes::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.HelloRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&uint32_client_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uint32_interval_) -
        reinterpret_cast<char*>(&uint32_client_ip_)) + sizeof(uint32_interval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HelloRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 uint32_client_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uint32_client_ip(&has_bits);
          uint32_client_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_client_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uint32_client_port(&has_bits);
          uint32_client_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uint32_interval(&has_bits);
          uint32_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.HelloRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 uint32_client_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uint32_client_ip(), target);
  }

  // optional uint32 uint32_client_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uint32_client_port(), target);
  }

  // optional uint32 uint32_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uint32_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.HelloRes)
  return target;
}

size_t HelloRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.HelloRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 uint32_client_ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_client_ip());
    }

    // optional uint32 uint32_client_port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_client_port());
    }

    // optional uint32 uint32_interval = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_interval());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.HelloRes)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HelloRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.HelloRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.HelloRes)
    MergeFrom(*source);
  }
}

void HelloRes::MergeFrom(const HelloRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.HelloRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      uint32_client_ip_ = from.uint32_client_ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      uint32_client_port_ = from.uint32_client_port_;
    }
    if (cached_has_bits & 0x00000004u) {
      uint32_interval_ = from.uint32_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HelloRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.HelloRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloRes::CopyFrom(const HelloRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.HelloRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRes::IsInitialized() const {
  return true;
}

void HelloRes::InternalSwap(HelloRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(uint32_client_ip_, other->uint32_client_ip_);
  swap(uint32_client_port_, other->uint32_client_port_);
  swap(uint32_interval_, other->uint32_interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SdpReq::InitAsDefaultInstance() {
}
class SdpReq::_Internal {
 public:
  using HasBits = decltype(std::declval<SdpReq>()._has_bits_);
  static void set_has_str_sdp_offer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SdpReq::SdpReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.SdpReq)
}
SdpReq::SdpReq(const SdpReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_sdp_offer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_sdp_offer()) {
    str_sdp_offer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_sdp_offer_);
  }
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.SdpReq)
}

void SdpReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SdpReq_media_5fgateway_5faccess_2eproto.base);
  str_sdp_offer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SdpReq::~SdpReq() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.SdpReq)
  SharedDtor();
}

void SdpReq::SharedDtor() {
  str_sdp_offer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SdpReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SdpReq& SdpReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SdpReq_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void SdpReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.SdpReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    str_sdp_offer_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SdpReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string str_sdp_offer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_str_sdp_offer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencent.media_gateway.access.SdpReq.str_sdp_offer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SdpReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.SdpReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str_sdp_offer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_sdp_offer().data(), static_cast<int>(this->_internal_str_sdp_offer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tencent.media_gateway.access.SdpReq.str_sdp_offer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str_sdp_offer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.SdpReq)
  return target;
}

size_t SdpReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.SdpReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string str_sdp_offer = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_sdp_offer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdpReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.SdpReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SdpReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SdpReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.SdpReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.SdpReq)
    MergeFrom(*source);
  }
}

void SdpReq::MergeFrom(const SdpReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.SdpReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_str_sdp_offer()) {
    _has_bits_[0] |= 0x00000001u;
    str_sdp_offer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_sdp_offer_);
  }
}

void SdpReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.SdpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdpReq::CopyFrom(const SdpReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.SdpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdpReq::IsInitialized() const {
  return true;
}

void SdpReq::InternalSwap(SdpReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  str_sdp_offer_.Swap(&other->str_sdp_offer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SdpReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SdpRes::InitAsDefaultInstance() {
}
class SdpRes::_Internal {
 public:
  using HasBits = decltype(std::declval<SdpRes>()._has_bits_);
  static void set_has_str_sdp_answer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SdpRes::SdpRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.SdpRes)
}
SdpRes::SdpRes(const SdpRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_sdp_answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_sdp_answer()) {
    str_sdp_answer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_sdp_answer_);
  }
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.SdpRes)
}

void SdpRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SdpRes_media_5fgateway_5faccess_2eproto.base);
  str_sdp_answer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SdpRes::~SdpRes() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.SdpRes)
  SharedDtor();
}

void SdpRes::SharedDtor() {
  str_sdp_answer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SdpRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SdpRes& SdpRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SdpRes_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void SdpRes::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.SdpRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    str_sdp_answer_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SdpRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string str_sdp_answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_str_sdp_answer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencent.media_gateway.access.SdpRes.str_sdp_answer");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SdpRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.SdpRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str_sdp_answer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_sdp_answer().data(), static_cast<int>(this->_internal_str_sdp_answer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tencent.media_gateway.access.SdpRes.str_sdp_answer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str_sdp_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.SdpRes)
  return target;
}

size_t SdpRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.SdpRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string str_sdp_answer = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_sdp_answer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdpRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.SdpRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SdpRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SdpRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.SdpRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.SdpRes)
    MergeFrom(*source);
  }
}

void SdpRes::MergeFrom(const SdpRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.SdpRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_str_sdp_answer()) {
    _has_bits_[0] |= 0x00000001u;
    str_sdp_answer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_sdp_answer_);
  }
}

void SdpRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.SdpRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdpRes::CopyFrom(const SdpRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.SdpRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdpRes::IsInitialized() const {
  return true;
}

void SdpRes::InternalSwap(SdpRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  str_sdp_answer_.Swap(&other->str_sdp_answer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SdpRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2CMediaBroadcastReq::InitAsDefaultInstance() {
}
class S2CMediaBroadcastReq::_Internal {
 public:
  using HasBits = decltype(std::declval<S2CMediaBroadcastReq>()._has_bits_);
  static void set_has_str_sdp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

S2CMediaBroadcastReq::S2CMediaBroadcastReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.S2CMediaBroadcastReq)
}
S2CMediaBroadcastReq::S2CMediaBroadcastReq(const S2CMediaBroadcastReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_sdp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_sdp()) {
    str_sdp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_sdp_);
  }
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.S2CMediaBroadcastReq)
}

void S2CMediaBroadcastReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S2CMediaBroadcastReq_media_5fgateway_5faccess_2eproto.base);
  str_sdp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

S2CMediaBroadcastReq::~S2CMediaBroadcastReq() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.S2CMediaBroadcastReq)
  SharedDtor();
}

void S2CMediaBroadcastReq::SharedDtor() {
  str_sdp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S2CMediaBroadcastReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2CMediaBroadcastReq& S2CMediaBroadcastReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2CMediaBroadcastReq_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void S2CMediaBroadcastReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.S2CMediaBroadcastReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    str_sdp_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* S2CMediaBroadcastReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string str_sdp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_str_sdp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencent.media_gateway.access.S2CMediaBroadcastReq.str_sdp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2CMediaBroadcastReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.S2CMediaBroadcastReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str_sdp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_sdp().data(), static_cast<int>(this->_internal_str_sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tencent.media_gateway.access.S2CMediaBroadcastReq.str_sdp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str_sdp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.S2CMediaBroadcastReq)
  return target;
}

size_t S2CMediaBroadcastReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.S2CMediaBroadcastReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string str_sdp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_sdp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2CMediaBroadcastReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.S2CMediaBroadcastReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2CMediaBroadcastReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2CMediaBroadcastReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.S2CMediaBroadcastReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.S2CMediaBroadcastReq)
    MergeFrom(*source);
  }
}

void S2CMediaBroadcastReq::MergeFrom(const S2CMediaBroadcastReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.S2CMediaBroadcastReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_str_sdp()) {
    _has_bits_[0] |= 0x00000001u;
    str_sdp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_sdp_);
  }
}

void S2CMediaBroadcastReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.S2CMediaBroadcastReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CMediaBroadcastReq::CopyFrom(const S2CMediaBroadcastReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.S2CMediaBroadcastReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CMediaBroadcastReq::IsInitialized() const {
  return true;
}

void S2CMediaBroadcastReq::InternalSwap(S2CMediaBroadcastReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  str_sdp_.Swap(&other->str_sdp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata S2CMediaBroadcastReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2CMediaBroadcastRes::InitAsDefaultInstance() {
}
class S2CMediaBroadcastRes::_Internal {
 public:
  using HasBits = decltype(std::declval<S2CMediaBroadcastRes>()._has_bits_);
};

S2CMediaBroadcastRes::S2CMediaBroadcastRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.S2CMediaBroadcastRes)
}
S2CMediaBroadcastRes::S2CMediaBroadcastRes(const S2CMediaBroadcastRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.S2CMediaBroadcastRes)
}

void S2CMediaBroadcastRes::SharedCtor() {
}

S2CMediaBroadcastRes::~S2CMediaBroadcastRes() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.S2CMediaBroadcastRes)
  SharedDtor();
}

void S2CMediaBroadcastRes::SharedDtor() {
}

void S2CMediaBroadcastRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2CMediaBroadcastRes& S2CMediaBroadcastRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2CMediaBroadcastRes_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void S2CMediaBroadcastRes::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.S2CMediaBroadcastRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* S2CMediaBroadcastRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2CMediaBroadcastRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.S2CMediaBroadcastRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.S2CMediaBroadcastRes)
  return target;
}

size_t S2CMediaBroadcastRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.S2CMediaBroadcastRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2CMediaBroadcastRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.S2CMediaBroadcastRes)
  GOOGLE_DCHECK_NE(&from, this);
  const S2CMediaBroadcastRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2CMediaBroadcastRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.S2CMediaBroadcastRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.S2CMediaBroadcastRes)
    MergeFrom(*source);
  }
}

void S2CMediaBroadcastRes::MergeFrom(const S2CMediaBroadcastRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.S2CMediaBroadcastRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void S2CMediaBroadcastRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.S2CMediaBroadcastRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CMediaBroadcastRes::CopyFrom(const S2CMediaBroadcastRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.S2CMediaBroadcastRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CMediaBroadcastRes::IsInitialized() const {
  return true;
}

void S2CMediaBroadcastRes::InternalSwap(S2CMediaBroadcastRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2CMediaBroadcastRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMediaBroadcastReq::InitAsDefaultInstance() {
}
class GetMediaBroadcastReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMediaBroadcastReq>()._has_bits_);
};

GetMediaBroadcastReq::GetMediaBroadcastReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.GetMediaBroadcastReq)
}
GetMediaBroadcastReq::GetMediaBroadcastReq(const GetMediaBroadcastReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.GetMediaBroadcastReq)
}

void GetMediaBroadcastReq::SharedCtor() {
}

GetMediaBroadcastReq::~GetMediaBroadcastReq() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.GetMediaBroadcastReq)
  SharedDtor();
}

void GetMediaBroadcastReq::SharedDtor() {
}

void GetMediaBroadcastReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMediaBroadcastReq& GetMediaBroadcastReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMediaBroadcastReq_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void GetMediaBroadcastReq::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.GetMediaBroadcastReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetMediaBroadcastReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMediaBroadcastReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.GetMediaBroadcastReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.GetMediaBroadcastReq)
  return target;
}

size_t GetMediaBroadcastReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.GetMediaBroadcastReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMediaBroadcastReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.GetMediaBroadcastReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMediaBroadcastReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMediaBroadcastReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.GetMediaBroadcastReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.GetMediaBroadcastReq)
    MergeFrom(*source);
  }
}

void GetMediaBroadcastReq::MergeFrom(const GetMediaBroadcastReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.GetMediaBroadcastReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetMediaBroadcastReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.GetMediaBroadcastReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMediaBroadcastReq::CopyFrom(const GetMediaBroadcastReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.GetMediaBroadcastReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMediaBroadcastReq::IsInitialized() const {
  return true;
}

void GetMediaBroadcastReq::InternalSwap(GetMediaBroadcastReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMediaBroadcastReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMediaBroadcastRes::InitAsDefaultInstance() {
}
class GetMediaBroadcastRes::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMediaBroadcastRes>()._has_bits_);
  static void set_has_str_sdp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetMediaBroadcastRes::GetMediaBroadcastRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tencent.media_gateway.access.GetMediaBroadcastRes)
}
GetMediaBroadcastRes::GetMediaBroadcastRes(const GetMediaBroadcastRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_sdp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_sdp()) {
    str_sdp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_sdp_);
  }
  // @@protoc_insertion_point(copy_constructor:tencent.media_gateway.access.GetMediaBroadcastRes)
}

void GetMediaBroadcastRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMediaBroadcastRes_media_5fgateway_5faccess_2eproto.base);
  str_sdp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetMediaBroadcastRes::~GetMediaBroadcastRes() {
  // @@protoc_insertion_point(destructor:tencent.media_gateway.access.GetMediaBroadcastRes)
  SharedDtor();
}

void GetMediaBroadcastRes::SharedDtor() {
  str_sdp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetMediaBroadcastRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMediaBroadcastRes& GetMediaBroadcastRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMediaBroadcastRes_media_5fgateway_5faccess_2eproto.base);
  return *internal_default_instance();
}


void GetMediaBroadcastRes::Clear() {
// @@protoc_insertion_point(message_clear_start:tencent.media_gateway.access.GetMediaBroadcastRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    str_sdp_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetMediaBroadcastRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string str_sdp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_str_sdp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tencent.media_gateway.access.GetMediaBroadcastRes.str_sdp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMediaBroadcastRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tencent.media_gateway.access.GetMediaBroadcastRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str_sdp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_sdp().data(), static_cast<int>(this->_internal_str_sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tencent.media_gateway.access.GetMediaBroadcastRes.str_sdp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str_sdp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tencent.media_gateway.access.GetMediaBroadcastRes)
  return target;
}

size_t GetMediaBroadcastRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tencent.media_gateway.access.GetMediaBroadcastRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string str_sdp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_sdp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMediaBroadcastRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tencent.media_gateway.access.GetMediaBroadcastRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMediaBroadcastRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMediaBroadcastRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tencent.media_gateway.access.GetMediaBroadcastRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tencent.media_gateway.access.GetMediaBroadcastRes)
    MergeFrom(*source);
  }
}

void GetMediaBroadcastRes::MergeFrom(const GetMediaBroadcastRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tencent.media_gateway.access.GetMediaBroadcastRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_str_sdp()) {
    _has_bits_[0] |= 0x00000001u;
    str_sdp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_sdp_);
  }
}

void GetMediaBroadcastRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tencent.media_gateway.access.GetMediaBroadcastRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMediaBroadcastRes::CopyFrom(const GetMediaBroadcastRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tencent.media_gateway.access.GetMediaBroadcastRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMediaBroadcastRes::IsInitialized() const {
  return true;
}

void GetMediaBroadcastRes::InternalSwap(GetMediaBroadcastRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  str_sdp_.Swap(&other->str_sdp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMediaBroadcastRes::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace access
}  // namespace media_gateway
}  // namespace tencent
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::MediaGatewayHead* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::MediaGatewayHead >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::MediaGatewayHead >(arena);
}
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::MediaGatewayBodyReq* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::MediaGatewayBodyReq >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::MediaGatewayBodyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::MediaGatewayBodyRes* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::MediaGatewayBodyRes >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::MediaGatewayBodyRes >(arena);
}
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::JoinMeetingMediaReq* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::JoinMeetingMediaReq >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::JoinMeetingMediaReq >(arena);
}
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::JoinMeetingMediaRes* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::JoinMeetingMediaRes >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::JoinMeetingMediaRes >(arena);
}
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::HelloReq* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::HelloReq >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::HelloReq >(arena);
}
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::HelloRes* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::HelloRes >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::HelloRes >(arena);
}
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::SdpReq* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::SdpReq >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::SdpReq >(arena);
}
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::SdpRes* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::SdpRes >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::SdpRes >(arena);
}
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::S2CMediaBroadcastReq* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::S2CMediaBroadcastReq >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::S2CMediaBroadcastReq >(arena);
}
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::S2CMediaBroadcastRes* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::S2CMediaBroadcastRes >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::S2CMediaBroadcastRes >(arena);
}
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::GetMediaBroadcastReq* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::GetMediaBroadcastReq >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::GetMediaBroadcastReq >(arena);
}
template<> PROTOBUF_NOINLINE ::tencent::media_gateway::access::GetMediaBroadcastRes* Arena::CreateMaybeMessage< ::tencent::media_gateway::access::GetMediaBroadcastRes >(Arena* arena) {
  return Arena::CreateInternal< ::tencent::media_gateway::access::GetMediaBroadcastRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
